<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NAP</title>
  <subtitle>Next Application Platform</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nap-blog.artemisprojects.org/"/>
  <updated>2016-04-06T03:06:29.907Z</updated>
  <id>http://nap-blog.artemisprojects.org/</id>
  
  <author>
    <name>NAP Group</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop, Hive, Tez 搭建笔记</title>
    <link href="http://nap-blog.artemisprojects.org/2016-03-hadoop_hive_tez/"/>
    <id>http://nap-blog.artemisprojects.org/2016-03-hadoop_hive_tez/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.907Z</updated>
    
    <content type="html"><![CDATA[<p>详细介绍了一个 Hadoop，Hive 和 Tez 集群的搭建过程。</p>
<a id="more"></a>
<hr>
<h1 id="Hadoop-Hive-Tez- 搭建"><a href="#Hadoop-Hive-Tez- 搭建" class="headerlink" title="Hadoop Hive Tez 搭建"></a>Hadoop Hive Tez 搭建 </h1><p> 集群 192.168.100.[205-220], 主节点 205, 其余为从节点，以用户 experiment 为例</p>
<h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="etc-hosts"><a href="#etc-hosts" class="headerlink" title="/etc/hosts"></a>/etc/hosts</h3><p>hadoop 是以主机名进行通信的，需要配置所有机器的 /etc/hosts</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.205</span> <span class="selector-tag">slave205</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.206</span> <span class="selector-tag">slave206</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.207</span> <span class="selector-tag">slave207</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.208</span> <span class="selector-tag">slave208</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.209</span> <span class="selector-tag">slave209</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.210</span> <span class="selector-tag">slave210</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.211</span> <span class="selector-tag">slave211</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.212</span> <span class="selector-tag">slave212</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.213</span> <span class="selector-tag">slave213</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.214</span> <span class="selector-tag">slave214</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.215</span> <span class="selector-tag">slave215</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.216</span> <span class="selector-tag">slave216</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.217</span> <span class="selector-tag">slave217</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.218</span> <span class="selector-tag">slave218</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.219</span> <span class="selector-tag">slave219</span></div><div class="line">192<span class="selector-class">.168</span><span class="selector-class">.100</span><span class="selector-class">.220</span> <span class="selector-tag">slave220</span></div></pre></td></tr></table></figure>
<h3 id="ssh 免密码登陆"><a href="#ssh 免密码登陆" class="headerlink" title="ssh 免密码登陆"></a>ssh 免密码登陆</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div><div class="line"></div><div class="line">cat id_rsa.pub <span class="meta">&gt;&gt; </span>~<span class="regexp">/.ssh/authorized</span>_keys</div></pre></td></tr></table></figure>
<h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><p>openjdk 和 oracle-jdk 都行</p>
<h3 id="下载并修改配置文件"><a href="# 下载并修改配置文件" class="headerlink" title="下载并修改配置文件"></a>下载并修改配置文件</h3><p>slaves</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">slave206</span></div><div class="line">slave207</div><div class="line">slave208</div><div class="line">slave209</div><div class="line">slave210</div><div class="line">slave211</div><div class="line">slave212</div><div class="line">slave213</div><div class="line">slave214</div><div class="line">slave215</div><div class="line">slave216</div><div class="line">slave217</div><div class="line">slave218</div><div class="line">slave219</div><div class="line">slave220</div></pre></td></tr></table></figure>
<p>core-site.xml</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;configuration&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>fs.defaultFS<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//slave205:9000&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>hadoop.tmp.dir<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/home/</span>experiment<span class="meta-keyword">/hadoop/</span>tmp<span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line"><span class="params">&lt;/configuration&gt;</span></div></pre></td></tr></table></figure>
<p>hdfs-site.xml</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;configuration&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>dfs.namenode.name.dir<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/home/</span>experiment<span class="meta-keyword">/hadoop/</span>name<span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>dfs.namenode.data.dir<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/home/</span>experiment<span class="meta-keyword">/hadoop/</span>data<span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span><span class="number">3</span><span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>dfs.namenode.secondary.http-address<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>slave205:<span class="number">50090</span><span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line"><span class="params">&lt;/configuration&gt;</span></div></pre></td></tr></table></figure>
<p>yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.delete.debug-delay-sec<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave205:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="环境变量"><a href="# 环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>vim ~/.bashrc</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">HADOOP_HOME=<span class="regexp">/home/experiment</span><span class="regexp">/hadoop-2.6.4</span></div><div class="line">JAVA_HOME=/usr<span class="regexp">/java/jdk</span>1.<span class="number">8.0_73</span></div><div class="line">CLASSPATH=$JAVA_HOME/<span class="class"><span class="keyword">lib</span>:$<span class="title">JAVA_HOME</span>/<span class="title">jre</span>/<span class="title">lib</span></span></div><div class="line">PATH=$<span class="symbol">PATH:</span>$JAVA_HOME/<span class="symbol">bin:</span>$<span class="symbol">PATH:</span>$HADOOP_HOME/<span class="symbol">bin:</span>$HADOOP_HOME/sbin</div><div class="line"></div><div class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/<span class="class"><span class="keyword">lib</span>/<span class="title">native</span></span></div><div class="line">export HADOOP_OPTS=<span class="string">"-Djava.library.path=$HADOOP_HOME/lib"</span></div><div class="line"></div><div class="line">export JAVA_HOME CLASSPATH HADOOP_HOME PATH</div></pre></td></tr></table></figure>
<h3 id="scp- 到从节点对应的目录"><a href="#scp- 到从节点对应的目录" class="headerlink" title="scp 到从节点对应的目录"></a>scp 到从节点对应的目录 </h3><h3 id="启动"><a href="# 启动" class="headerlink" title="启动"></a> 启动</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hdfs namenode -<span class="built_in">format</span></div><div class="line"><span class="built_in">start</span>-dfs.sh</div><div class="line"><span class="built_in">start</span>-yarn.sh</div></pre></td></tr></table></figure>
<h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h3 id="hive 下载解压"><a href="#hive 下载解压" class="headerlink" title="hive 下载解压"></a>hive 下载解压 </h3><h3 id="环境变量 -1"><a href="# 环境变量 -1" class="headerlink" title="环境变量"></a> 环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HIVE_HOME=/home/experiment/apache-hive-1.2.1-bin</div><div class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</div><div class="line"></div><div class="line"><span class="built_in">export</span> HADOOP_USER_CLASSPATH_FIRST=<span class="literal">true</span></div><div class="line"><span class="built_in">export</span> HIVE_HOME PATH</div></pre></td></tr></table></figure>
<h3 id="mysql 安装"><a href="#mysql 安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载源码解压，然后执行下面的命令以生成 Makefile</span></div><div class="line"></div><div class="line">cmake \</div><div class="line">-DCMAKE_INSTALL_PREFIX=<span class="regexp">/home/experiment</span><span class="regexp">/mysql \</span></div><div class="line">-DMYSQL_UNIX_ADDR=/home<span class="regexp">/experiment/mysql</span><span class="regexp">/mysql.sock \</span></div><div class="line">-DDEFAULT_CHARSET=utf8 \</div><div class="line">-DDEFAULT_COLLATION=utf8_general_ci \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</div><div class="line">-DMYSQL_home/experimentDIR=<span class="regexp">/home/experiment</span><span class="regexp">/mysql/home</span><span class="regexp">/experiment \</span></div><div class="line">-DMYSQL_TCP_PORT=3306 \</div><div class="line">-DENABLE_DOWNLOADS=1</div><div class="line"></div><div class="line"># 如果报错找不到 CMakeCache.txt，则需要安装 ncurses-devel，安装后进行编译</div><div class="line"></div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line">sudo ln -s /home<span class="regexp">/experiment/mysql</span><span class="regexp">/lib/libmysqlclient</span>.so.<span class="number">18</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">libmysqlclient</span>.<span class="title">so</span>.18</span></div><div class="line">sudo ln -s /home/experiment/mysql.sock /tmp/mysql.sock</div><div class="line">sudo cp /home/experiment/mysql/support-files/my-default.cnf /etc/my.cnf</div><div class="line">sudo cp /home/experiment/mysql/support-files/mysql.server /etc/init.d/mysqld</div><div class="line">sudo chmod +x /etc/init.d/mysqld</div><div class="line">sudo ln -s /home/experiment/mysql/bin/mysql /usr/bin/</div><div class="line"></div><div class="line"><span class="regexp">/home/experiment</span><span class="regexp">/mysql/scripts</span><span class="regexp">/mysql_install_db --user=experiment --defaults-file=/etc</span><span class="regexp">/my.cnf --basedir=/home</span><span class="regexp">/experiment/mysql</span> --datadir=<span class="regexp">/home/experiment</span><span class="regexp">/mysql/data</span></div><div class="line"></div><div class="line">service mysqld start</div><div class="line"></div><div class="line">mysql -uroot -h127.<span class="number">0.0</span>.<span class="number">1</span> -p</div><div class="line"></div><div class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">'123456'</span>);</div><div class="line">CREATE USER <span class="string">'hive'</span> IDENTIFIED BY <span class="string">'hive'</span>;</div><div class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'hive'</span>@<span class="string">'slave205'</span> WITH GRANT OPTION;</div><div class="line"></div><div class="line">flush privileges;</div><div class="line"></div><div class="line">mysql -h hadoop-master -uhive</div><div class="line">mysql&gt;set password = password(<span class="string">'hive'</span>);</div><div class="line">create database hive;</div><div class="line">alter database hive character set latin1</div></pre></td></tr></table></figure>
<h3 id="修改 hive 配置文件"><a href="# 修改 hive 配置文件" class="headerlink" title="修改 hive 配置文件"></a>修改 hive 配置文件 </h3><p> 先 cp hive-default.xml.template hive-default.xml</p>
<p>再 vim hive-site.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://slave205:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="下载 jdbc"><a href="# 下载 jdbc" class="headerlink" title="下载 jdbc"></a>下载 jdbc</h3><p>cp mysql-connector-java-5.1.33-bin.jar apache-hive-1.2.1-bin/lib/</p>
<h3 id="让 hive 支持 update"><a href="# 让 hive 支持 update" class="headerlink" title="让 hive 支持 update"></a>让 hive 支持 update</h3><p>修改 hive-site.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.support.concurrency<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.enforce.bucketing<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.dynamic.partition.mode<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nonstrict<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.txn.manager<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hive.ql.lockmgr.DbTxnManager<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.compactor.initiator.on<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.compactor.worker.threads<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="启动 hive-metastore 和 hiveserver2"><a href="# 启动 hive-metastore 和 hiveserver2" class="headerlink" title="启动 hive metastore 和 hiveserver2"></a>启动 hive metastore 和 hiveserver2</h3><p>hive metastore 不启动也可以使用 hive，metastore 的作用是给 hive 的客户端使用</p>
<p>hiveserver2 是 hive 的 thrift 服务器可以让远程 java、python 等客户端调用 hive 的 API，需要在 hive-site.xml 中修改 hive.server2.thrift.bind.host 为 slave205，默认是 localhost</p>
<h2 id="Tez"><a href="#Tez" class="headerlink" title="Tez"></a>Tez</h2><p><a href="http://tez.apache.org/install.html" target="_blank" rel="external">官方安装指南</a></p>
<h3 id="编译"><a href="# 编译" class="headerlink" title="编译"></a>编译 </h3><p> 下载 tez 源码解压，修改 pom.xml 中的 hadoop.version 为具体的 hadoop 版本号</p>
<p>编译</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean <span class="keyword">package</span> -DskipTests=<span class="keyword">true</span> -Dmaven.javadoc.skip=<span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>编译需要 jdk6+，maven3+ 和 protocol buffers 2.5.0，编译期间可能会遇到下载失败或者 ssl 超时，多编译几次应该可以解决。其它常见问题参考<a href="https://cwiki.apache.org/confluence/display/TEZ/Build+errors+and+solutions" target="_blank" rel="external">wiki</a></p>
<h3 id="环境变量 -2"><a href="# 环境变量 -2" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export TEZ_JARS=<span class="regexp">/home/experiment</span><span class="regexp">/tez-0.8.2</span></div><div class="line">export TEZ_CONF_DIR=/home<span class="regexp">/experiment/hadoop</span>-<span class="number">2.6</span>.<span class="number">4</span>/etc/hadoop</div><div class="line">export HADOOP_CLASSPATH=$<span class="symbol">HADOOP_CLASSPATH:</span>$&#123;TEZ_CONF_DIR&#125;:$&#123;TEZ_JARS&#125;/*:$&#123;TEZ_JARS&#125;/<span class="class"><span class="keyword">lib</span>/*</span></div></pre></td></tr></table></figure>
<h3 id="放置编译好的 tez-x-y-z-tar-gz"><a href="# 放置编译好的 tez-x-y-z-tar-gz" class="headerlink" title="放置编译好的 tez-x.y.z.tar.gz"></a>放置编译好的 tez-x.y.z.tar.gz</h3><p>位于 tez-dist/target 目录下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hadoop dfs -mkdir /apps</div><div class="line">hadoop dfs -copyFromLocal tez-x<span class="selector-class">.y</span><span class="selector-class">.z</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> /apps/</div></pre></td></tr></table></figure>
<h3 id="修改 tez-site-xml"><a href="# 修改 tez-site-xml" class="headerlink" title="修改 tez-site.xml"></a>修改 tez-site.xml</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;configuration&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>tez.lib.uris<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>$&#123;fs.defaultFS&#125;<span class="meta-keyword">/apps/</span>tez<span class="number">-0.8</span><span class="number">.2</span>.tar.gz<span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line">    <span class="params">&lt;property&gt;</span></div><div class="line">        <span class="params">&lt;name&gt;</span>tez.use.cluster.hadoop-libs<span class="params">&lt;/name&gt;</span></div><div class="line">        <span class="params">&lt;value&gt;</span>false<span class="params">&lt;/value&gt;</span></div><div class="line">    <span class="params">&lt;/property&gt;</span></div><div class="line"><span class="params">&lt;/configuration&gt;</span></div></pre></td></tr></table></figure>
<h3 id="在 hive 中使用 tez"><a href="# 在 hive 中使用 tez" class="headerlink" title="在 hive 中使用 tez"></a>在 hive 中使用 tez</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hive</div><div class="line"></div><div class="line">hive &gt; <span class="keyword">set</span> hive.execution.engine=tez;</div><div class="line">	 &gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;详细介绍了一个Hadoop，Hive和Tez集群的搭建过程。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://nap-blog.artemisprojects.org/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="http://nap-blog.artemisprojects.org/tags/hadoop/"/>
    
      <category term="Hive" scheme="http://nap-blog.artemisprojects.org/tags/Hive/"/>
    
      <category term="Tez" scheme="http://nap-blog.artemisprojects.org/tags/Tez/"/>
    
  </entry>
  
  <entry>
    <title>NAP 使用手册</title>
    <link href="http://nap-blog.artemisprojects.org/2016-01-nap-doc/"/>
    <id>http://nap-blog.artemisprojects.org/2016-01-nap-doc/</id>
    <published>2016-01-10T14:00:03.000Z</published>
    <updated>2016-04-06T03:06:29.908Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为 NAP 平台的使用手册，详细介绍了 NAP 的使用细节及操作截图。</p>
<a id="more"></a>
<h2 id="用户登录"><a href="# 用户登录" class="headerlink" title="用户登录"></a>用户登录 </h2><p> 使用浏览器打开 <strong>NAP 平台</strong>(<a href="http://nap.artemisprojects.org/" target="_blank" rel="external">http://nap.artemisprojects.org/</a>) , 显示登录界面。<br><img src="/images/nap-doc/login.png" alt=""><br>NAP 平台暂时还不支持开放注册，需要注册使用可联系开发人员，之后用给定的用户名密码登录即可。<br> 登录界面中勾选<code>Remember me</code>, 下次打开 NAP 平台可以直接进入控制界面，无需重复登录。</p>
<p>登录成功即进入桌面形式的控制界面。<br><img src="/images/nap-doc/desktop.png" alt=""></p>
<h2 id="创建项目"><a href="# 创建项目" class="headerlink" title="创建项目"></a>创建项目 </h2><p> 打开桌面上 <code>Create Project</code> 图标，弹出窗口提示用户输入项目名称和项目 url。<br><img src="/images/nap-doc/create.png" alt=""><br>输入项目名称和 url 后，点击 <code>create</code> 创建该项目，创建需要一小段时间，创建成功会弹出消息提示项目创建成功。需要注意项目名称不能包含 <strong>‘-‘</strong>。</p>
<p>项目具体配置方法可见桌面上 <code>Readme</code> 中的教程，其中包含了详细的示例。<br><img src="/images/nap-doc/readme.png" alt=""></p>
<h2 id="项目管理"><a href="# 项目管理" class="headerlink" title="项目管理"></a>项目管理 </h2><p> 创建成功的项目可以通过项目列表进行查看和管理，双击条目或点击最前面的 <strong>‘+’</strong> 可以查看该项目的服务节点。通过列表中的按钮可以对项目进行管理。<br><img src="/images/nap-doc/list.png" alt=""></p>
<h3 id="1- 查看服务节点日志"><a href="#1- 查看服务节点日志" class="headerlink" title="1. 查看服务节点日志"></a>1. 查看服务节点日志 </h3><p> 点击列表中相应服务节点的 <code>logs</code> 按钮，就会弹出该服务节点的日志信息。</p>
<h3 id="2- 命令行工具"><a href="#2- 命令行工具" class="headerlink" title="2. 命令行工具"></a>2. 命令行工具 </h3><p> 对每个节点都有一个命令行工具，点击 <code>shell</code> 按钮即可弹出，用户名和密码都是 admin。<br><img src="/images/nap-doc/shell.png" alt=""></p>
<h3 id="3- 删除项目"><a href="#3- 删除项目" class="headerlink" title="3. 删除项目"></a>3. 删除项目 </h3><p> 如果想删除某个项目，可以点击该项目对应的 <code>destroy</code> 按钮，系统会提示是否确认删除，如果确认删除就可删除当前项目，否则将取消该操作。<br><img src="/images/nap-doc/destroy.png" alt=""></p>
<h2 id="文件管理"><a href="# 文件管理" class="headerlink" title="文件管理"></a>文件管理 </h2><p>NAP 平台包含一个文件管理系统<code>File Browser</code>，每个项目在创建时自动生成一个文件夹，项目的<code>git</code> 文件会 <code>clone</code> 到这个文件夹中，当该项目被删除时会同时删除该文件夹。<br>这个文件夹是一个分布式文件系统上的共享目录，比直接在 <code>docker</code> 内存储文件的可靠性高。每个容器启动后会自动挂载到 <code>/nap</code> 目录下。<br>文件管理系统分成两部分，左边是文件的目录树，右边的窗口既可以用来现实当前路径下的文件，也可以现实具体的文件内容，下面对其进行详细的介绍。</p>
<h3 id="1- 文件操作"><a href="#1- 文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作 </h3><p> 文件管理系统可以完成对文件的新建、重命名、复制、粘贴、移动、删除操作。通过在左边的目录树中右键相应的节点，弹出菜单选择相应的操作，注意新建等操作只能在文件夹上进行，新建出的文件在该文件夹下，文件的移动操作是通过对文件夹或文件的托拽实现的。<br><img src="/images/nap-doc/folder.png" alt=""></p>
<h3 id="2- 文件编辑"><a href="#2- 文件编辑" class="headerlink" title="2. 文件编辑"></a>2. 文件编辑 </h3><p> 在目录树中点击一个文件或在右边文件窗口中双击可以打开一个文件，文件会显示在右边的窗口中。</p>
<ul>
<li>系统会自动识别代码的类型，对其进行高亮处理，如果无法识别，则可以通过窗口左上角的选择框选择相应的代码类型。</li>
<li>一旦修改文件框中的文件，右上角的保存按钮会由灰色不可点击变成可以点，点击保存按钮修改后的文件将被保存到服务器。</li>
<li>当你切换文件或关闭文件时，如果文件被修改过，系统会提示你是否保存修改的内容。</li>
</ul>
<p><img src="/images/nap-doc/file.png" alt=""></p>
<h2 id="注销登录"><a href="# 注销登录" class="headerlink" title="注销登录"></a>注销登录 </h2><p> 点击左下角 <code>Start</code> 按钮，弹出的开始菜单中点击 <code>Logout</code> 按钮即完成注销操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇为NAP平台的使用手册，详细介绍了NAP的使用细节及操作截图。&lt;/p&gt;
    
    </summary>
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/categories/nap/"/>
    
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/tags/nap/"/>
    
  </entry>
  
  <entry>
    <title>我们的 2015</title>
    <link href="http://nap-blog.artemisprojects.org/2015-12-photos/"/>
    <id>http://nap-blog.artemisprojects.org/2015-12-photos/</id>
    <published>2015-12-29T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.909Z</updated>
    
    <content type="html"><![CDATA[<p> 有图有真相;-)</p>
<a id="more"></a>
<hr>
<p><img src="/images/photos/12-29.jpg" alt=""></p>
<p><img src="/images/photos/12-24.jpg" alt=""></p>
<p><img src="/images/photos/08-03.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有图有真相;-)&lt;/p&gt;
    
    </summary>
    
      <category term="未分类" scheme="http://nap-blog.artemisprojects.org/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Hotswap Agent 学习笔记</title>
    <link href="http://nap-blog.artemisprojects.org/2015-12-hotSwapAgent-not/"/>
    <id>http://nap-blog.artemisprojects.org/2015-12-hotSwapAgent-not/</id>
    <published>2015-12-17T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.907Z</updated>
    
    <content type="html"><![CDATA[<p>热部署是在不重启 Java 虚拟机的前提下，能自动侦测到 class 文件的变化，更新运行时 class 的行为。<a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="external">Hotswap Agent</a>是一个支持热部署的开源项目，该项目的主要目的是为了避免低效的 change-&gt;restart + wait-&gt;check 开发生命周期。</p>
<a id="more"></a>
<hr>
<h2 id="Hotswap-Agent- 介绍"><a href="#Hotswap-Agent- 介绍" class="headerlink" title="Hotswap Agent 介绍"></a>Hotswap Agent 介绍 </h2><p> 热部署是在不重启 Java 虚拟机的前提下，能自动侦测到 class 文件的变化，更新运行时 class 的行为。<a href="https://github.com/HotswapProjects/HotswapAgent" target="_blank" rel="external">Hotswap Agent</a>是一个支持热部署的开源项目，该项目的主要目的是为了避免低效的 change-&gt;restart + wait-&gt;check 开发生命周期。Hotswap Agent 支持所有主要的框架， 比如：Hibernate、Spring、Jetty、ZooKeeper 等。Hotswap Agent 拥有如下特性。</p>
<ul>
<li><strong>增强的 Java HotSwap</strong> - 支持改变方法体，添加 / 重命名方法或属性。唯一不支持的操作是层次结构的变化（改变父类或删除接口）</li>
<li><strong>自动配置</strong> - 所有的本地类和已知的正在运行的 Java 应用程序的资源可以自动监控并重新加载（不包括在 Jar 文件里的类）</li>
<li><strong>额外的类路径</strong> - 需要改变存在依赖的 jar 包中的类，使用 extraClasspath 属性，添加任何目录作为类路径。</li>
<li><strong>更改后重新加载资源</strong> - 使用 watchResources 属性添加任何目录来监视资源的变化。</li>
<li><strong>框架的支持</strong> - 通过 plugin system，Hotswap Agent 支持许多框架。并且新的 plugin 可以很容易地添加。</li>
<li><strong>快速</strong> - 只有 plugin 被初始化消耗资源，其余时间它不消耗任何资源或减慢应用程序</li>
</ul>
<h2 id="Hotswap-Agent- 安装"><a href="#Hotswap-Agent- 安装" class="headerlink" title="Hotswap Agent 安装"></a>Hotswap Agent 安装</h2><ul>
<li>下载最新的<a href="https://github.com/dcevm/dcevm/releases" target="_blank" rel="external">DCEVM Java Patch</a></li>
<li>运行下载的 jar 包(e.g. java -jar XXX-installer-light.jar)</li>
<li>选择本地 JDK 的安装路径。</li>
<li>下载最新的<a href="https://github.com/HotswapProjects/HotswapAgent/releases" target="_blank" rel="external">Hotswap Agent jar</a>，将它放在任意目录，比如：/home</li>
</ul>
<h2 id="Hotswap-Agent- 使用"><a href="#Hotswap-Agent- 使用" class="headerlink" title="Hotswap Agent 使用"></a>Hotswap Agent 使用 </h2><p> 在运行 java 应用程序时，添加如下参数：<code>-XXaltjvm=dcevm -javaagent:PATH_TO_AGENT/hotswap-agent.jar=autoHotswap=true</code><br>其中，参数 <code>autoHotswap</code> 指定当应用程序的某个 class 变化时，自动动态加载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热部署是在不重启Java虚拟机的前提下，能自动侦测到class文件的变化，更新运行时class的行为。&lt;a href=&quot;https://github.com/HotswapProjects/HotswapAgent&quot;&gt;Hotswap Agent&lt;/a&gt;是一个支持热部署的开源项目，该项目的主要目的是为了避免低效的change-&amp;gt;restart + wait-&amp;gt;check开发生命周期。&lt;/p&gt;
    
    </summary>
    
      <category term="TVDCR" scheme="http://nap-blog.artemisprojects.org/categories/TVDCR/"/>
    
    
      <category term="spring" scheme="http://nap-blog.artemisprojects.org/tags/spring/"/>
    
      <category term="transacion" scheme="http://nap-blog.artemisprojects.org/tags/transacion/"/>
    
      <category term="dynamic reconfiguration" scheme="http://nap-blog.artemisprojects.org/tags/dynamic-reconfiguration/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper 学习笔记</title>
    <link href="http://nap-blog.artemisprojects.org/2015-12-zookeeper-note/"/>
    <id>http://nap-blog.artemisprojects.org/2015-12-zookeeper-note/</id>
    <published>2015-12-09T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.909Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper 是一个典型的分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布／订阅、负责均衡、命名服务、分布式协调／通知、<br>集群管理等功能。 ZooKeeper 可以保证如下分布式一致性特征。</p>
<a id="more"></a>
<hr>
<h2 id="ZooKeeper 是什么"><a href="#ZooKeeper 是什么" class="headerlink" title="ZooKeeper 是什么"></a>ZooKeeper 是什么 </h2><p>ZooKeeper 是一个典型的分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布／订阅、负责均衡、命名服务、分布式协调／通知、<br> 集群管理等功能。 ZooKeeper 可以保证如下分布式一致性特征。</p>
<h3 id="顺序一致性"><a href="# 顺序一致性" class="headerlink" title="顺序一致性"></a>顺序一致性 </h3><p> 从同一个客户端发起的事务请求，最终将会严格地按照其发起顺序被应用到 ZooKeeper 中去</p>
<h3 id="原子性"><a href="# 原子性" class="headerlink" title="原子性"></a>原子性 </h3><p> 所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，要么整个集群所有机器都成功应用了某一个事务，要么都没有应用</p>
<h3 id="单一视图"><a href="# 单一视图" class="headerlink" title="单一视图"></a>单一视图 </h3><p> 无论客户端连接的是哪个 ZooKeeper 服务器，其看到的服务端数据模型都是一致的。</p>
<h3 id="可靠性"><a href="# 可靠性" class="headerlink" title="可靠性"></a>可靠性 </h3><p> 一旦服务端成功地应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会被一直保留下来，除非有另一个事务又对其进行了变更。</p>
<h3 id="实时性"><a href="# 实时性" class="headerlink" title="实时性"></a>实时性</h3><p>ZooKeeper 仅仅保证在一定的时间内，客户端最终一定能够从服务器端上读取到最新的数据状态。</p>
<h2 id="ZooKeeper 提供了什么"><a href="#ZooKeeper 提供了什么" class="headerlink" title="ZooKeeper 提供了什么"></a>ZooKeeper 提供了什么 </h2><p> 简单的说，ZooKeeper= 文件系统 + 通知机制。</p>
<h3 id="文件系统"><a href="# 文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>ZooKeeper 维护一个类似文件系统的数据结构</p>
<p><img src="/images/zookeeper-file-structure.png" alt=""></p>
<p>每个子目录项如 NameService 都被称作为 znode，和文件系统一样，我们能够自由的增加、删除 znode，在一个 znode 下增加、删除子 znode，唯一的不同在于 znode 是可以存储数据的。有四种类型的 znode：</p>
<ul>
<li>PERSISTENT- 持久化目录节点 <br> 客户端与 zookeeper 断开连接后，该节点依旧存在</li>
<li>PERSISTENT_SEQUENTIAL- 持久化顺序编号目录节点 <br> 客户端与 zookeeper 断开连接后，该节点依旧存在，只是 Zookeeper 给该节点名称进行顺序编号</li>
<li>EPHEMERAL- 临时目录节。客户端与 zookeeper 断开连接后，该节点被删除<br>4、EPHEMERAL_SEQUENTIAL- 临时顺序编号目录节点。客户端与 zookeeper 断开连接后，该节点被删除，只是 Zookeeper 给该节点名称进行顺序编号</li>
</ul>
<h3 id="通知机制"><a href="# 通知机制" class="headerlink" title="通知机制"></a>通知机制 </h3><p> 客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，ZooKeeper 会通知客户端。</p>
<h2 id="保证分布式数据原子性操作"><a href="# 保证分布式数据原子性操作" class="headerlink" title="保证分布式数据原子性操作"></a>保证分布式数据原子性操作</h2><p>ZooKeeper 中为数据节点（znode）引入了版本的概念，每个数据节点都具有三种类型的版本信息，说明如下表。</p>
<table>
<thead>
<tr>
<th>版本类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>version</td>
<td>当前数据节点数据内容的版本号 </td>
</tr>
<tr>
<td>cversion</td>
<td>当前数据节点子节点的版本号</td>
</tr>
<tr>
<td>aversion</td>
<td>当前数据节点 ACL 变更版本号</td>
</tr>
</tbody>
</table>
<p>下文以其中的 version 版本类型为例说明。在一个数据节点 <code>/zk</code> 被创建完毕之后，节点的 version 值是 0，表示的含义是“当前节点自创建以后，被更新过 0 次”。如果现在对该节点的数据内容进行更新操作，则 version 的值变为 1。需要注意的是，即使前后两次变更并没有似的数据内容的值发生变化，version 的值依然会变更。</p>
<p>ZooKeeper 引入 version 的作用，主要是实现乐观锁，保证数据原子性操作。乐观锁把控制的事务分成三个阶段：数据读取、写入校验、数据写入，其中写入校验阶段是整个乐观锁控制的关键所在。如何进行写入校验呢？ZooKeeper 采用的是 JDK 中最典型的乐观锁实现——<a href="https://en.wikipedia.org/wiki/Compare-and-swap" target="_blank" rel="external">CAS(Compare and Swap)</a>。简单的讲就是：对于值 V，每次更新前都会比对其值是否是预期值 A，只有符合预期，才会将 V 原子化地更新到新值 B，其中是否符合预期便是乐观锁中的“写入校验”阶段。</p>
<p>下面以一个更新数据实例，演示如何用 version 保证一致性。假如一个客户端试图进行更新操作，它会携带上次获取到的 version 值进行更新。而如果在这段时间内，ZooKeeper 服务器上该节点的数据已经被其他客户端更新了，那么数据版本一定已发生了变化，因此肯定与客户端携带的 version 无法匹配，于是便无法更新成功。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.EventType;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKVersionSample</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String path = <span class="string">"/zk"</span>;</div><div class="line">        zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"127.0.0.1:2181"</span>, <span class="number">5000</span>, <span class="keyword">new</span> ZKVersionSample());</div><div class="line"></div><div class="line">        connectedSemaphore.await();</div><div class="line">        zk.create(path, <span class="string">"123"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE,</div><div class="line">                CreateMode.EPHEMERAL);</div><div class="line">        zk.getData(path, <span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">        Stat stat = zk.setData(path, <span class="string">"456"</span>.getBytes(), -<span class="number">1</span>);</div><div class="line">        System.out.println(stat.getCzxid() + <span class="string">","</span> + stat.getMzxid() + <span class="string">","</span></div><div class="line">                + stat.getVersion());</div><div class="line"></div><div class="line">        Stat stat2 = zk.setData(path, <span class="string">"456"</span>.getBytes(), stat.getVersion());</div><div class="line">        System.out.println(stat2.getCzxid() + <span class="string">","</span> + stat2.getMzxid() + <span class="string">","</span></div><div class="line">                + stat2.getVersion());</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            zk.setData(path, <span class="string">"456"</span>.getBytes(), stat.getVersion());</div><div class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">            System.out.println(<span class="string">"Error:"</span> + e.code() + <span class="string">","</span> + e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (KeeperState.SyncConnected == event.getState()) &#123;</div><div class="line">            <span class="keyword">if</span> (EventType.None == event.getType() &amp;&amp; <span class="keyword">null</span> == event.getPath())&#123;</div><div class="line">                connectedSemaphore.countDown();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt;output</div><div class="line"><span class="number">17</span>,<span class="number">18</span>,<span class="number">1</span></div><div class="line"><span class="number">17</span>,<span class="number">19</span>,<span class="number">2</span></div><div class="line">Error: BADVERSION,KeeperErrorCode = BadVersion <span class="keyword">for</span> /zk</div></pre></td></tr></table></figure>
<p>上面的示例程序中，进行了三次更新操作，分别使用了不同的 version。在第一次更新操作中，使用的版本是“－1”，并且更新成功。在 ZooKeeper 中，数据版本都是从 0 开始计数。如果客户端传入的版本参数是“－1”，就是告诉 ZooKeeper 服务端，客户端需要基于数据的最新版本进行更新操作。</p>
<p>在第一次更新操作成功后，ZooKeeper 服务端回返回给客户端一个数据节点的节点状态信息对象：stat。在第二次更新操作中，我们在接口中传入了这个版本号，此时的数据版本变更为“2”。</p>
<p>在第三次操作的时候，程序依然使用了之前的版本“1”进行更新操作，于是更新失败了。</p>
<h2 id="Java 客户端 API 使用"><a href="#Java 客户端 API 使用" class="headerlink" title="Java 客户端 API 使用"></a>Java 客户端 API 使用</h2><p>ZooKeeper 作为一个分布式服务框架，主要用来解决分布式数据一致性问题，它提供了简单的分布式原语，并且对多种变种语言提供了 API。下面只介绍 ZooKeeper 的 Java 客户端 API 使用方式</p>
<h3 id="创建会话"><a href="# 创建会话" class="headerlink" title="创建会话"></a>创建会话 </h3><p> 客户端可以通过创建一个 ZooKeeper 实例来连接 ZooKeeper 服务器。ZooKeeper 的四种构造方法如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ZooKeeper(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher);</div><div class="line">ZooKeeper(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">boolean</span> canBeReadOnly);</div><div class="line">ZooKeeper(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd);</div><div class="line">ZooKeeper(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd, <span class="keyword">boolean</span> canBeReadOnly);</div></pre></td></tr></table></figure>
<p>以下是 ZooKeeper 构造方法参数说明</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>connectString</td>
<td>指 ZooKeeper 服务器列表，由 host:port 字符串组成。也可以在 connectString 中设置客户端连接上 ZooKeeper 后的根目录。</td>
</tr>
<tr>
<td>sessionTimeout</td>
<td>指会话的超时时间，单位毫秒</td>
</tr>
<tr>
<td>watcher</td>
<td>事件通知器，可以为 null</td>
</tr>
<tr>
<td>canBeReadOnly</td>
<td>用于标示当前会话是否支持”read－only”模式</td>
</tr>
<tr>
<td>sessionId</td>
<td>和 sessionPasswd 分别代表会话 ID 和会话秘钥。客户端使用这两个参数可以实现客户端会话复用</td>
</tr>
</tbody>
</table>
<p>ZooKeeper 客户端和服务器会话的建立是一个异步的过程。当会话真正创建完毕之后，ZooKeeper 服务端会想会话对应的客户端发送一个事件通知。</p>
<p>创建一个最基本的 ZooKeeper 会话实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException; </div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper; </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKBootSample</span></span>&#123; </div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">10000</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECTION_STRING = <span class="string">"127.0.0.1:2181"</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_PATH = <span class="string">"/nileader"</span>; </div><div class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>; </div><div class="line">     </div><div class="line"> 	<span class="keyword">private</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span> ); </div><div class="line"> </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 创建 ZK 连接 </div><div class="line">     * <span class="doctag">@param</span> connectString  ZK 服务器地址列表 </div><div class="line">     * <span class="doctag">@param</span> sessionTimeout   Session 超时时间 </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createConnection</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout )</span> </span>&#123; </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">this</span> ); </div><div class="line">            connectedSemaphore.await(); </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </div><div class="line">            System.out.println(<span class="string">"连接创建失败，发生 InterruptedException"</span> ); </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; </div><div class="line">            System.out.println(<span class="string">"连接创建失败，发生 IOException"</span> ); </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span> </span>&#123; </div><div class="line"> </div><div class="line">        ZKBootSample sample = <span class="keyword">new</span> ZKBootSample(); </div><div class="line">        sample.createConnection(CONNECTION_STRING, SESSION_TIMEOUT); </div><div class="line">    &#125; </div><div class="line"> </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建节点"><a href="# 创建节点" class="headerlink" title="创建节点"></a>创建节点 </h3><p> 客户端可以通过 ZooKeeper 的 API 来创建一个数据节点，有如下两个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl, CreateMode createMode)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl, CreateMode createMode, StringCallback cb, Object ctx)</span></span>;</div></pre></td></tr></table></figure>
<p>这两个接口分别以同步和异步方式创建节点，参数说明如下表。</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>需要创建的数据节点的节点路径，例如／zk/foo</td>
</tr>
<tr>
<td>data[]</td>
<td>一个字节数组，是创建节点后的初始内容</td>
</tr>
<tr>
<td>acl</td>
<td>节点的 ACL 策略</td>
</tr>
<tr>
<td>createMode</td>
<td>节点类型，有持久、持久顺序、临时、临时顺序</td>
</tr>
<tr>
<td>cb</td>
<td>异步回调函数</td>
</tr>
<tr>
<td>ctx</td>
<td>用于传递一个对象，在回调方法执行的时候使用</td>
</tr>
</tbody>
</table>
<p>无论是同步还是异步接口，ZooKeeper 都不支持递归创建，即无法在父节点不存在的情况下创建一个子节点。如果一个节点已经存在，那么创建同名节点的时候，会抛出 NodeExistsException 异常。</p>
<p>ZooKeeper 的节点内容只支持字节数组（byte[]）类型，不负责为节点内容进行序列化。对于字符串，可以简单的使用”string”.getBytes()来生成一个字节数组，对于其他复杂对象，可以使用 Hessian 或是 Kryo 等序列化工具进行序列化。</p>
<p>使用同步 API 创建一个节点</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException; </div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper; </div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKBootSample</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123; </div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">10000</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECTION_STRING = <span class="string">"127.0.0.1:2181"</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_PATH = <span class="string">"/nileader"</span>; </div><div class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span> );  </div><div class="line">     </div><div class="line">    <span class="comment">/** </span></div><div class="line">     *  创建节点 </div><div class="line">     * <span class="doctag">@param</span> path 节点 path </div><div class="line">     * <span class="doctag">@param</span> data 初始数据内容 </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createPath</span><span class="params">(String path, String data)</span> </span>&#123; </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            System.out.println(<span class="string">"节点创建成功, Path:"</span> </div><div class="line">                    + <span class="keyword">this</span>.zk.create(path, <span class="comment">// </span></div><div class="line">                                              data.getBytes(), <span class="comment">// </span></div><div class="line">                                              Ids.OPEN_ACL_UNSAFE, <span class="comment">// </span></div><div class="line">                                              CreateMode.EPHEMERAL ) </div><div class="line">                    + <span class="string">", content:"</span> + data ); </div><div class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123; </div><div class="line">            System.out.println(<span class="string">"节点创建失败，发生 KeeperException"</span> ); </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </div><div class="line">            System.out.println(<span class="string">"节点创建失败，发生 InterruptedException"</span> ); </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span> </span>&#123; </div><div class="line"> </div><div class="line">        ZKBootSample sample = <span class="keyword">new</span> ZKBootSample(); </div><div class="line">        sample.createConnection(CONNECTION_STRING, SESSION_TIMEOUT); </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sample.createPath( ZK_PATH, <span class="string">"我是节点初始内容"</span> ) ) &#123; </div><div class="line">            <span class="comment">//do something</span></div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除节点"><a href="# 删除节点" class="headerlink" title="删除节点"></a>删除节点 </h3><p> 客户端可以通过 ZooKeeper 的 API 来删除一个节点，有如下两个接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">int</span> version)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">int</span> version, VoidCallBack cb, Object ctx)</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>需要删除的数据节点的节点路径，例如／zk/foo</td>
</tr>
<tr>
<td>version</td>
<td>指定节点的数据版本，即表明本次删除操作是针对该数据版本进行的</td>
</tr>
<tr>
<td>cb</td>
<td>异步回调函数</td>
</tr>
<tr>
<td>ctx</td>
<td>用于传递一个对象，在回调方法执行的时候使用</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException; </div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper; </div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKBootSample</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123; </div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">10000</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECTION_STRING = <span class="string">"127.0.0.1:2181"</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_PATH = <span class="string">"/nileader"</span>; </div><div class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span> );  </div><div class="line"></div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 删除指定节点 </div><div class="line">     * <span class="doctag">@param</span> path 节点 path </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(String path)</span> </span>&#123; </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            <span class="keyword">this</span>.zk.delete(path, -<span class="number">1</span> ); </div><div class="line">            System.out.println(<span class="string">"删除节点成功，path："</span> + path ); </div><div class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123; </div><div class="line">            System.out.println(<span class="string">"删除节点失败，发生 KeeperException，path:"</span> + path  ); </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </div><div class="line">            System.out.println(<span class="string">"删除节点失败，发生 InterruptedException，path:"</span> + path  ); </div><div class="line">            e.printStackTrace(); </div><div class="line">        &#125; </div><div class="line">    &#125;  </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span> </span>&#123; </div><div class="line"> </div><div class="line">        ZKBootSample sample = <span class="keyword">new</span> ZKBootSample(); </div><div class="line">        sample.createConnection(CONNECTION_STRING, SESSION_TIMEOUT); </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sample.createPath( ZK_PATH, <span class="string">"我是节点初始内容"</span> ) ) &#123; </div><div class="line">            <span class="comment">//do something</span></div><div class="line">            sample.deleteNode(ZK_PATH); </div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取数据"><a href="# 读取数据" class="headerlink" title="读取数据"></a>读取数据 </h3><p> 读取数据， 包括自节点列表的获取和节点数据的获取。ZooKeeper 分别提供了不同的 API 来获取数据。</p>
<h4 id="getChildren"><a href="#getChildren" class="headerlink" title="getChildren"></a>getChildren</h4><p>客户端可以通过 ZooKeeper 的 API 来获取一个节点的所有子节点，有如下 4 个接口可以使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;String&gt; <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher)</span></span>;</div><div class="line"><span class="function">List&lt;String&gt; <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">boolean</span> watch)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher, ChildrenCallback cb, Object ctx)</span></span>;</div><div class="line"><span class="function">List&lt;String&gt; <span class="title">getChildren</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher, Stat stat)</span></span>;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>path</td>
<td>指定数据节点的节点路径，例如／zk/foo</td>
</tr>
<tr>
<td>watcher</td>
<td>注册的 Watcher。一旦本次子节点获取之后，当子节点列表发生变更，那么就会向客户端发送通知。该参数允许传入 null</td>
</tr>
<tr>
<td>watch</td>
<td>表明是否需要一个 Watcher。如果这个参数是 true，那么 ZooKeeper 客户端会自动使用程序上文中提到的那个默认 Watcher</td>
</tr>
<tr>
<td>cb</td>
<td>异步回调函数</td>
</tr>
<tr>
<td>ctx</td>
<td>用于传递一个对象，在回调方法执行的时候使用</td>
</tr>
<tr>
<td>stat</td>
<td>指定数据节点的节点状态。用法是在接口中传入一个旧的 stat 变量，该 stat 变量会在方法执行过程中，被来自服务端响应的新 stat 对象替换</td>
</tr>
</tbody>
</table>
<p>stat 用于描述节点状态信息，该对象纪录了一个节点的基本属性信息，例如节点创建时的事务 ID、最后一次修改的事务 ID 和节点数据内容的长度等。</p>
<h4 id="getData"><a href="#getData" class="headerlink" title="getData"></a>getData</h4><p>客户端可以通过 ZooKeeper 的 API 来获取一个节点的所有子节点，有如下 4 个接口可以使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span>[] getData(<span class="keyword">final</span> String path, Watcher watcher, Stat stat);</div><div class="line"><span class="keyword">byte</span>[] getData(<span class="keyword">final</span> String path, <span class="keyword">boolean</span> watch, Stat stat);</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher, DataCallback cb, Object ctx)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">boolean</span> watch, DataCallback cb, Object ctx)</span></span>;</div></pre></td></tr></table></figure>
<p>参数说明痛 getChildren。一个简单的读取数据实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException; </div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids; </div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper; </div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKBootSample</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123; </div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIMEOUT = <span class="number">10000</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECTION_STRING = <span class="string">"127.0.0.1:2181"</span>; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_PATH = <span class="string">"/nileader"</span>; </div><div class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span> );  </div><div class="line"> </div><div class="line"> 	<span class="comment">/** </span></div><div class="line">     * 读取指定节点数据内容 </div><div class="line">     * <span class="doctag">@param</span> path 节点 path </div><div class="line">     * <span class="doctag">@return</span> </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readData</span><span class="params">(String path)</span> </span>&#123; </div><div class="line">        <span class="keyword">try</span> &#123; </div><div class="line">            System.out.println(<span class="string">"获取数据成功，path："</span> + path ); </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(<span class="keyword">this</span>.zk.getData(path, <span class="keyword">false</span>, <span class="keyword">null</span> ) ); </div><div class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123; </div><div class="line">            System.out.println(<span class="string">"读取数据失败，发生 KeeperException，path:"</span> + path  ); </div><div class="line">            e.printStackTrace(); </div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>; </div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </div><div class="line">            System.out.println(<span class="string">" 读取数据失败，发生 InterruptedException，path: "</span> + path  ); </div><div class="line">            e.printStackTrace(); </div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span> </span>&#123; </div><div class="line"> </div><div class="line">        ZKBootSample sample = <span class="keyword">new</span> ZKBootSample(); </div><div class="line">        sample.createConnection(CONNECTION_STRING, SESSION_TIMEOUT); </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sample.createPath( ZK_PATH, <span class="string">"我是节点初始内容"</span> ) ) &#123; </div><div class="line">            <span class="comment">//do something</span></div><div class="line">            System.out.println(<span class="string">"数据内容:"</span> + sample.readData(ZK_PATH) + <span class="string">"\n"</span> ); </div><div class="line">        &#125; </div><div class="line"> </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZooKeeper是一个典型的分布式数据一致性的解决方案，分布式应用可以基于它实现诸如数据发布／订阅、负责均衡、命名服务、分布式协调／通知、&lt;br&gt;集群管理等功能。 ZooKeeper可以保证如下分布式一致性特征。&lt;/p&gt;
    
    </summary>
    
      <category term="TVDCR" scheme="http://nap-blog.artemisprojects.org/categories/TVDCR/"/>
    
    
      <category term="spring" scheme="http://nap-blog.artemisprojects.org/tags/spring/"/>
    
      <category term="transacion" scheme="http://nap-blog.artemisprojects.org/tags/transacion/"/>
    
      <category term="dynamic reconfiguration" scheme="http://nap-blog.artemisprojects.org/tags/dynamic-reconfiguration/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 平台 Neutron 服务初探</title>
    <link href="http://nap-blog.artemisprojects.org/2015-12-openstack_neutron/"/>
    <id>http://nap-blog.artemisprojects.org/2015-12-openstack_neutron/</id>
    <published>2015-12-01T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前搭建了一个两个结点的 OpenStack 集群，老板说太简单了太 low 了，于是最近又重新搭建了一个四个结点的 OpenStack 集群。其中包含一个 Controller 结点，一个 Network 结点和两个 Compute 结点。其中 Network 结点主要运行 OpenStack 中的网络服务，即 Neutron 组件。下面对这个集群的部署过程做一下总结，并且简单介绍一下 Neutron 服务。</p>
</blockquote>
<a id="more"></a>
<h2 id="扩展 Compute 结点"><a href="# 扩展 Compute 结点" class="headerlink" title="扩展 Compute 结点"></a>扩展 Compute 结点 </h2><p> 扩展 Compute 结点相对来说是比较简单的。并且所有 Computer 节点的部署过程都是相同的，详细信息请参考上一篇。</p>
<h2 id="部署 Network 结点"><a href="# 部署 Network 结点" class="headerlink" title="部署 Network 结点"></a>部署 Network 结点 </h2><h3 id="开始之前"><a href="# 开始之前" class="headerlink" title="开始之前"></a> 开始之前 </h3><p> 在上一篇中，我们将 Neutron 服务的所有代理都放在了 Controller 组件里面，这些代理包括：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Linux</span>网桥代理没建立 layer-<span class="number">2</span>虚拟网络，为实例提供 VXLAN 通道并处理安全组问题 (security groups)。</div><div class="line"><span class="symbol">DHCP</span> 代理，用于在创建实例时分配 <span class="built_in">IP</span> 地址。</div><div class="line"><span class="symbol">L3</span>代理，为虚拟网络提供路由和 NAT 服务。</div><div class="line"><span class="symbol">Metadata</span>代理，提供配置信息，如实例的证书等。</div></pre></td></tr></table></figure>
<p>我们想把上述代理都放在 Network 结点中，即将 Neutron 组件单独运行在一个结点中。我们的解决思路是尝试着分别将每个代理依次从 Controller 结点迁移到 Network 结点中。在此之前，我们首先将与各个代理相关的配置文件项列出来，并给予一些说明。</p>
<ul>
<li>ML2 插件配置项(配置文件为 /etc/neutron/plugins/ml2/ml2_conf.ini)</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">type_drivers</span> = flat,vlan,vxlan</div><div class="line"><span class="attr">tenant_network_types</span> = vxlan</div><div class="line"><span class="attr">mechanism_drivers</span> = linuxbridge,l2population</div><div class="line"><span class="attr">extension_drivers</span> = port_security</div><div class="line"><span class="attr">flat_networks</span> = public</div><div class="line"><span class="attr">vni_ranges</span> = <span class="number">1</span>:<span class="number">1000</span></div><div class="line"><span class="attr">enable_ipset</span> = <span class="literal">True</span></div></pre></td></tr></table></figure>
<p>在 ml2 插件的配置项中，主要是开启了 flat,vlan,vxlan 网络，其中私有网络 (tenant) 使用的是 vxlan 隧道，具体为下图所示。我们看到 VXLAN 隧道在网桥代理中，我们领 management network 的 ip 地址赋给 VXLAN 的网卡。而 flat 网络是 OpenStack 网络中的一种工作机制。Flat 模式指定一个子网，规定虚拟机实例能使用的 ip 范围，也就是一个 ip 池，创建实例时，从 ip 池中取出一个有效的 ip 为虚拟机分配，并且在虚拟机启动时注入虚拟机镜像。在这里，给 Flat 网命名为 public。</p>
<p><img src="/images/openstack-network-connect.png" alt=""></p>
<ul>
<li>Linux 网桥代理配置</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">physical_interface_mappings</span> = public:eth0 </div><div class="line"><span class="attr">enable_vxlan</span> = <span class="literal">True</span> </div><div class="line"><span class="attr">local_ip</span> = OVERLAY_INTERFACE_IP_ADDRESS</div><div class="line"><span class="attr">l2_population</span> = <span class="literal">True</span></div><div class="line"><span class="attr">prevent_arp_spoofing</span> = <span class="literal">True</span></div><div class="line"><span class="attr">enable_security_group</span> = <span class="literal">True</span></div><div class="line"><span class="attr">firewall_driver</span> = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</div></pre></td></tr></table></figure>
<p>在 Linux 网桥的配置项中，我们开启了 VXLAN 通道，并且指定 ip 为 management work 中的 ip，并将 public 网络绑定在 eth0 网卡(public network)。</p>
<ul>
<li>L3 代理配置</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">interface_driver = neutron<span class="selector-class">.agent</span><span class="selector-class">.linux</span><span class="selector-class">.interface</span><span class="selector-class">.BridgeInterfaceDriver</span></div><div class="line">external_network_bridge =</div></pre></td></tr></table></figure>
<ul>
<li>DHCP 代理配置</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface_driver = neutron<span class="selector-class">.agent</span><span class="selector-class">.linux</span><span class="selector-class">.interface</span><span class="selector-class">.BridgeInterfaceDriver</span></div><div class="line">dhcp_driver = neutron<span class="selector-class">.agent</span><span class="selector-class">.linux</span><span class="selector-class">.dhcp</span><span class="selector-class">.Dnsmasq</span></div><div class="line">enable_isolated_metadata = True</div></pre></td></tr></table></figure>
<p>在上述两个代理中，我们都在 interface_driver 项中选择了 Linux 网桥的驱动。</p>
<ul>
<li>Metadata 代理配置，主要为与 keystone 和 nova 之间关于认证的一些 <a href="http://docs.openstack.org/liberty/install-guide-ubuntu/neutron-controller-install.html" target="_blank" rel="external"> 配置项</a>，没有太多需要说明的。</li>
</ul>
<h3 id="将 L3 代理迁移到 Network 结点"><a href="# 将 L3 代理迁移到 Network 结点" class="headerlink" title="将 L3 代理迁移到 Network 结点"></a>将 L3 代理迁移到 Network 结点</h3><ol>
<li>首先在 Controller 上面停掉 L3 代理，在 Network 结点上面启动 L3 代理，其实配置项都是一样的。</li>
<li>然后需要在 Network 结点配置好 Linux 网桥代理，原因不用说，只有 L3 代理不就相当于一个孤点么，没有任何作用。</li>
<li>重新建立一个网络，运行一个实例，配置一个 floating-ip，然后 ssh 进去就可以啦！</li>
</ol>
<h3 id="将 DHCP 代理迁移到 Network 结点"><a href="# 将 DHCP 代理迁移到 Network 结点" class="headerlink" title="将 DHCP 代理迁移到 Network 结点"></a>将 DHCP 代理迁移到 Network 结点</h3><ol>
<li>跟 L3 代理一样，首先还是在 Network 结点中启动 DHCP 代理，然后停掉 Controller 结点上面的 DHCP 代理。</li>
<li>本以为建立好一个网络后，一切还是很正常的运行，但是发现事实不是这样子的。当我写下这篇文章的时候，我只记得我当时去看了实例的 log，发现已经分配了正确的 ip 地址，于是就断定 DHCP 代理是没有错的，并且查询了一下 neutron 的 log，发现有几个是刚刚更新过的，发现在 metadata 的 log 里面，没有将请求或操作连接到正确的消息 url 中，即一直都在请求 127.0.0.1 的本地消息队列，而 Network 结点是没有装消息队列的，所以肯定是不对的。</li>
<li>最后，直接一次性将 metadata 代理也迁移了过去。</li>
<li>建立好一个网络，运行实例，配置一个 floating-ip，然后 ssh 进去就可以啦！</li>
</ol>
<h3 id="结果截个图"><a href="# 结果截个图" class="headerlink" title="结果截个图"></a>结果截个图</h3><ol>
<li><p>Neutron 组件代理列表：<br> <img src="/images/openstack-neutron-agentlist.png" alt=""></p>
<p> 可以看到，Neutron 组件的所有代理目前都跑在了 Network 结点上面。</p>
</li>
<li><p>Floating-ip 测试：</p>
<p> 建立好一个虚拟机实例。<br> <img src="/images/openstack-neutron-novalist.png" alt=""></p>
<p> 然后 ssh 进去访问它。<br> <img src="/images/openstack-neutron-floatingip.png" alt=""></p>
<p> 可以看到我们最后是在 Network 结点上进行访问的，并且需要输入密码，这点我们会在后面详细解释一下。</p>
</li>
</ol>
<h2 id="在 OpenStack 中建立网络"><a href="# 在 OpenStack 中建立网络" class="headerlink" title="在 OpenStack 中建立网络"></a>在 OpenStack 中建立网络 </h2><p> 之前说了那么多，下面具体讲一下在 OpenStack 中如何建立网络，看完这个过程，你会发现里面有一些东西会跟前面的某些名词对应上。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source admin-openrc.sh</div><div class="line">neutron net-create <span class="keyword">public</span> --shared --<span class="string">provider:</span>physical_network <span class="keyword">public</span> --<span class="string">provider:</span>network_type flat</div></pre></td></tr></table></figure>
<p>这条命令会建立一个类型为 flat，名称为 public 的共享虚拟网络。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">neutron subnet-create public <span class="number">10.0</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> --name public --allocation-pool start=<span class="number">10.0</span><span class="number">.2</span><span class="number">.110</span>,end=<span class="number">10.0</span><span class="number">.2</span><span class="number">.200</span> --dns-nameserver <span class="number">10.0</span><span class="number">.2</span><span class="number">.3</span> --gateway <span class="number">10.0</span><span class="number">.2</span><span class="number">.2</span></div></pre></td></tr></table></figure>
<p>这条命令会为 public 网络分配 ip 池，可以看到分配了 90 个 ip，并且有相对应的 dns 服务器和网关。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source demo-openrc.sh</div><div class="line">neutron net-create private</div><div class="line">neutron subnet-create private <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> --name private --dns-nameserver <span class="number">10.0</span><span class="number">.2</span><span class="number">.3</span> --gateway <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<p>这两条命令是 demo 用户创建了一个私有的虚拟网络，名字为 private。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">source admin-openrc.sh</div><div class="line">neutron net-<span class="keyword">update</span> <span class="keyword">public</span> <span class="comment">--router:external</span></div><div class="line"><span class="keyword">source</span> demo-openrc.sh</div><div class="line">neutron router-<span class="keyword">create</span> router</div><div class="line">neutron router-<span class="keyword">interface</span>-<span class="keyword">add</span> router <span class="keyword">private</span></div><div class="line">neutron router-gateway-<span class="keyword">set</span> router <span class="keyword">public</span></div></pre></td></tr></table></figure>
<p>上述命令会建立一个路由器 router，并且将 private 网络作为 router 上面的一个网卡，将 public 网络当做 router 上面的网关。建好了网络，在建立实例之前，首先验证一下。在 Controller 结点上面列出端口信息。并且查看每个端口的详细信息。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">source</span> admin-openrc.sh</div><div class="line"><span class="title">neutron</span> router-<span class="keyword">port</span>-list router</div><div class="line">neutron <span class="keyword">port</span>-show $(id)</div></pre></td></tr></table></figure>
<p>截图如下：<br><img src="/images/openstack-router-port-list.png" alt=""></p>
<p>可以看到这些端口绑定的 host_id 是 neutron，即 Network 结点。这是因为 L3 代理是在 Network 结点上面的。这个时候检查一下网络的名空间，就应该在 Network 结点，而不是 Controller 结点了。</p>
<p><img src="/images/openstack-ip-netns.png" alt=""></p>
<p>并且这个 router 的网关 10.0.2.112 只能在 Network 结点上 ping 通。并且，建立好实例后，目前只能在 Network 结点 ping 通分配好的 floating-ip，在 ssh 进去的时候是需要输入密码的，这是因为默认的 ssh-key 是 controller 结点上的。其实，按照官方文档的说法，只要在 public 网络下面的任何结点都是可以通过 ssh 的方式进入虚拟机实例的，而我们目前只能在 Network 结点上，这是因为我们新建的路由器是绑定在 Network 结点上面的，而这是因为 L3 代理是运行在 Network 结点上面的。感觉能够通过添加路由转发规则的方式，令 public 子网内所有的主机都能通过 floating-ip 访问虚拟机实例。这一点会在本文写好之后进行尝试。</p>
<h2 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结 </h2><p> 经过这两天的尝试，感觉 OpenStack 的灵活性很高。就像我们这一次把 Neutron 服务从 Controller 结点迁移到 Network 结点，都是直接把网络代理从这边关闭，到那边打开就可以。给我的感觉就像是传说中的那种可以在硬件层面上组装的手机，需要什么零件自己选择。</p>
<p>还有一点就是，在出现错误时，我目前都是看 log 的。log 的目录是在 /var/log/$(service)/*.log 中，每次都查看最近更新过的 log，然后看里面有什么错误之类的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前搭建了一个两个结点的OpenStack集群，老板说太简单了太low了，于是最近又重新搭建了一个四个结点的OpenStack集群。其中包含一个Controller结点，一个Network结点和两个Compute结点。其中Network结点主要运行OpenStack中的网络服务，即Neutron组件。下面对这个集群的部署过程做一下总结，并且简单介绍一下Neutron服务。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OpenStack" scheme="http://nap-blog.artemisprojects.org/categories/OpenStack/"/>
    
    
      <category term="OpenStack" scheme="http://nap-blog.artemisprojects.org/tags/OpenStack/"/>
    
      <category term="Neutron" scheme="http://nap-blog.artemisprojects.org/tags/Neutron/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 平台手动搭建以及 floating-ip 的使用</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-openstack_floating_ip/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-openstack_floating_ip/</id>
    <published>2015-11-19T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.908Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近尝试着根据 OpenStack 官方网站的教程搭建一个简单的 OpenStack 集群，并且使用 floating-ip 机制。下面简单对这些工作进行介绍。</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="搭建 OpenStack 平台"><a href="# 搭建 OpenStack 平台" class="headerlink" title="搭建 OpenStack 平台"></a>搭建 OpenStack 平台 </h2><h3 id="开始之前"><a href="# 开始之前" class="headerlink" title="开始之前"></a> 开始之前 </h3><p> 在上一篇中，对 OpenStack 平台做了简单的介绍。这一次，我们根据 OpenStack 官网上面的 <a href="http://docs.openstack.org/liberty/install-guide-ubuntu/" target="_blank" rel="external"> 文档</a>，手动部署 OpenStack 中的服务组件。并在搭建好的平台上运行实例。平台的设计布局如下图所示：</p>
<p><img src="/images/openstack-layout.png" alt=""></p>
<p>在上图中，主要包括一个 Controller 节点和 Compute 节点，以及一些 Storage 节点。在本例中我们仅仅关注 Controller 节点和 Compute 节点。从图中可以看出 Controller 和 Compute 节点均包括两个子网，分别为 management network 和 public network。</p>
<p>我们使用 <a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant</a> 工具初始化两个节点。Vagrantfile 具体为：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Vagrant.configure(<span class="number">2</span>) <span class="built_in">do</span> |<span class="built_in">config</span>|</div><div class="line">	<span class="built_in">config</span>.vm.box = <span class="string">"ubuntu/trusty64"</span></div><div class="line"> 	<span class="built_in">config</span>.vm.hostname = <span class="string">"controller"</span></div><div class="line">	<span class="built_in">config</span>.ssh.username = <span class="string">"vagrant"</span></div><div class="line">	<span class="built_in">config</span>.ssh.password = <span class="string">"vagrant"</span></div><div class="line">   </div><div class="line">	<span class="built_in">config</span>.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"10.0.0.11"</span></div><div class="line">	<span class="built_in">config</span>.vm.network <span class="string">"public_network"</span></div><div class="line">	</div><div class="line">	<span class="built_in">config</span>.vm.provider <span class="string">"virtualbox"</span> <span class="built_in">do</span> |vb|</div><div class="line">		vb.gui = false</div><div class="line">		vb.memory = <span class="string">"6144"</span></div><div class="line">		vb.cpus = <span class="number">2</span></div><div class="line">	<span class="built_in">end</span></div><div class="line"><span class="built_in">end</span></div></pre></td></tr></table></figure>
<p>我们建立的虚拟机是 Ubuntu14.04 64 位，还有一些关于主机名，用户密码，内存，CPU 的简单设置。我们设置了两个网络，分别对应于 management work 和 public network。</p>
<h3 id="准备工作"><a href="# 准备工作" class="headerlink" title="准备工作"></a>准备工作 </h3><p> 在安装 OpenStack 的各个服务组件之前，需要预先安装一些软件。</p>
<ul>
<li><a href="http://docs.openstack.org/liberty/install-guide-ubuntu/environment-ntp.html" target="_blank" rel="external">NTP 协议</a>，用于同步不同节点之间的状态及服务。</li>
<li><a href="http://docs.openstack.org/liberty/install-guide-ubuntu/environment-packages.html" target="_blank" rel="external">OpenStack 包</a>，安装最新的 OpenStack 包，这里我们选取的是最新版 Liberty。</li>
<li><a href="http://docs.openstack.org/liberty/install-guide-ubuntu/environment-sql-database.html" target="_blank" rel="external">SQL 数据库</a>，在 Controller 节点上安装 SQL 数据库，大多数 OpenStack 服务使用 SQL 数据库用来存储信息。</li>
<li><a href="http://docs.openstack.org/liberty/install-guide-ubuntu/environment-nosql-database.html" target="_blank" rel="external">NoSQL 数据库 </a>，在 Controller 节点上安装，Telemetry 服务使用 NoSQL 数据库(一般为 MongoDB) 来存储消息。</li>
<li><a href="http://docs.openstack.org/liberty/install-guide-ubuntu/environment-messaging.html" target="_blank" rel="external">消息队列</a>，在 Controller 节点上安装，OpenStack 平台使用消息队列来协调各个服务之间的操作和状态信息。</li>
</ul>
<h3 id="安装 Keystone 组件"><a href="# 安装 Keystone 组件" class="headerlink" title="安装 Keystone 组件"></a>安装 Keystone 组件 </h3><p>OpenStack 平台中的 Keystone 服务主要用于身份管理，Keystone 的作用类似与一个服务总线，其他服务都通过 Keystone 来注册器服务的 Endpoint，针对这些服务的任何调用都需要经过 Keystone 的身份认证才可以。安装的步骤按照<a href="http://docs.openstack.org/liberty/install-guide-ubuntu/common/get_started_identity.html" target="_blank" rel="external"> 文档 </a> 中进行即可。</p>
<h3 id="安装 Glance 组件"><a href="# 安装 Glance 组件" class="headerlink" title="安装 Glance 组件"></a>安装 Glance 组件 </h3><p>OpenStack 平台中的 Glance 服务主要管理镜像。这点跟 Docker 中的 image 类似。即我们可以上传当前的镜像以便日后使用。安装的步骤按照<a href="http://docs.openstack.org/liberty/install-guide-ubuntu/glance.html" target="_blank" rel="external"> 文档 </a> 中进行即可。</p>
<h3 id="安装 Nova 组件"><a href="# 安装 Nova 组件" class="headerlink" title="安装 Nova 组件"></a>安装 Nova 组件 </h3><p>OpenStack 平台中的 Nova 服务是 OpenStack 平台的核心服务，它用于抽象虚拟机实例，并控制着虚拟机的状态便签，管理着它们的资源分配。安装的步骤按照<a href="http://docs.openstack.org/liberty/install-guide-ubuntu/nova.html" target="_blank" rel="external"> 文档 </a> 中进行，其中有一个地方文档写错了，我们会在后面详细说一下。</p>
<h3 id="安装 Neutron 组件"><a href="# 安装 Neutron 组件" class="headerlink" title="安装 Neutron 组件"></a>安装 Neutron 组件 </h3><p>OpenStack 平台中的 Neutron 服务将 OpenStack 平台所在的物理网络泛化为网络资源池，通过对物理网络资源的灵活划分与管理，Neutron 组件能为同一物理网络上的每个 tenant 提供独立的虚拟网络环境。安装的步骤按照<a href="http://docs.openstack.org/liberty/install-guide-ubuntu/neutron.html" target="_blank" rel="external"> 文档 </a> 中进行即可。安装后的网络模块大致如下：</p>
<p><img src="/images/openstack-network-overview.png" alt=""></p>
<p>其中 Controller 中有网桥代理，Metadata 代理，DHCP 代理和 L3 代理，而 Compute 节点中只有网桥代理。</p>
<h3 id="安装 Horizon 组件"><a href="# 安装 Horizon 组件" class="headerlink" title="安装 Horizon 组件"></a>安装 Horizon 组件 </h3><p>OpenStack 平台中的 Horizon 提供了 Dashboard，即一个简洁方便用户友好的控制界面，让开发者和使用者更好的浏览并操作属于自己的计算资源，安装步骤按照<a href="http://docs.openstack.org/liberty/install-guide-ubuntu/horizon.html" target="_blank" rel="external"> 文档 </a> 中进行即可。</p>
<h3 id="运行一个例子"><a href="# 运行一个例子" class="headerlink" title="运行一个例子"></a>运行一个例子 </h3><p> 在此之前，我们按照文档已经安装好了 OpenStack 平台最基本的一些服务，下面我们就可以运行一个 <a href="http://docs.openstack.org/liberty/install-guide-ubuntu/launch-instance.html" target="_blank" rel="external"> 例子</a>。在安装 Neutron 服务后，集群的网络拓扑为下图。</p>
<p><img src="/images/openstack-network-connect.png" alt=""></p>
<p>其中 public provider network 和 public physical network 应该在同一个网段内，management physical network 是启动虚拟机的 Vagrantfile 中已经预先定义好了。Private project network 需要自己手动创建，在文档中有例子，这个网段应该可以是任意指定的。 我们一共运行了两个实例，一个为公共实例，一个为私有实例，公共实例可以通过 ip 地址直接 ssh 访问 (因为在同一子网内)，但是私有实例则需要指定 floating-ip，才能访问。把 floating-ip 的介绍的<a href="https://www.rdoproject.org/networking/difference-between-floating-ip-and-private-ip/" target="_blank" rel="external"> 链接 1</a> <a href="http://docs.openstack.org/user-guide/cli_manage_ip_addresses.html" target="_blank" rel="external">链接 2</a>放出来，供大家参考。</p>
<p><img src="/images/openstack-network-instance.png" alt=""></p>
<p>如果想要访问私有实例 private-instance，由于分配了 floating-ip，所以它的访问过程如下图所示：</p>
<p><img src="/images/openstack-floating-ip.png" alt=""></p>
<h2 id="安装过程遇到的问题总结"><a href="# 安装过程遇到的问题总结" class="headerlink" title="安装过程遇到的问题总结"></a>安装过程遇到的问题总结</h2><ul>
<li>首先在安装完 Compute 服务后，发现在 Controller 节点上并没有显示出 Compute 节点上面的 nova-compute 服务，在网上找了一下原因。有的大神提出来在配置文件 /etc/nova/nova.conf 中，关于消息队列的三个配置项不应该在 <code>[oslo_messaging_rabbit]</code> 这个 section 中，应该在 <code>[DEFAULT]</code> 中，修改后重启 nova-compute 服务即可。在重启后，在 Controller 节点上发现 nova-compute 服务，状态为 up，但是过了一会儿状态变为 down 了。不知道为什么，在网上找了很久也没有解决。于是把 Compute 节点删掉，重新装了一遍，就好了。好了。了。</li>
<li>安装完 DashBoard 组件后，可以正常登陆，但是在打开 <code>Instance</code> 列表时，右上角会出现 <strong>Unable to Connect to Neutron</strong> 的提示，而且不能通过在 DashBoard 页面创建实例等。这是因为我在刚开始装 Neutron 组件的时候选择了 <a href="http://docs.openstack.org/liberty/install-guide-ubuntu/neutron-controller-install-option1.html" target="_blank" rel="external">Provider networks</a> 这个选项，在配置文件 /etc/neutron/neutron.conf 文件中，它禁用了 service_plugins 这个选项，即把它赋值为空。但是在第二个选项 <a href="http://docs.openstack.org/liberty/install-guide-ubuntu/neutron-controller-install-option2.html" target="_blank" rel="external">Self-service networks</a> 中，这一项赋值为 router。由于后来要使用 floating-ip 机制，所以需要选择第二个网络拓扑，就把这一项填充好了。然后之前页面上的问题也成功解决了。</li>
<li>在运行的例子中，由于我们最后选择的是第二项网络拓扑，所以运行的实例不论是共有 (public instance) 的还是私有 (private instance) 的，都应该可以正常运行。但是我们只能成功运行私有实例，并可以使用 floating-ip 机制访问进新建的 private 虚拟机实例。而公共实例却不能正常访问，这是因为虚拟机在启动的时候 DHCP 没有分配好 IP 地址，所以尽管我们在 DashBoard 中发现这个实例已经有了 IP 地址，但是通过 console 进入虚拟机之后发现并没有分配正确的 ip 地址。通过实例的 log 分析，应该是 DHCP 的配置出了一些问题，也在网上找了很久，都没有找到解决办法。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近尝试着根据OpenStack官方网站的教程搭建一个简单的OpenStack集群，并且使用floating-ip机制。下面简单对这些工作进行介绍。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OpenStack" scheme="http://nap-blog.artemisprojects.org/categories/OpenStack/"/>
    
    
      <category term="OpenStack" scheme="http://nap-blog.artemisprojects.org/tags/OpenStack/"/>
    
      <category term="floating-ip" scheme="http://nap-blog.artemisprojects.org/tags/floating-ip/"/>
    
  </entry>
  
  <entry>
    <title>凤城卫士 API 文档</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-fcws-api-doc/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-fcws-api-doc/</id>
    <published>2015-11-18T16:40:58.000Z</published>
    <updated>2016-04-06T03:06:29.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇为凤城卫士的 API 文档，包括其 url, 接受的参数，示例 url 以及返回值示例。对于 REST API 的 设计感兴趣的可以移步 <a href="http://mclspace.com/2015/11/03/restful-note/" target="_blank" rel="external"> 这篇文章</a></p>
</blockquote>
<p>注: 本篇中的 url 均具有前缀 <em>/api/v1</em> , 这里为简便起见，进行了省略.</p>
<a id="more"></a>
<p># 用户信息</p>
<h2 id="授权验证"><a href="# 授权验证" class="headerlink" title="授权验证"></a>授权验证 <!-- 这边应该 POST, 因为重新生成了 token --></h2><p><code>/auth/local</code> GET 验证用户名密码，并重新生成 token，返回基本的用户信息 <br> 接受参数:</p>
<ul>
<li>id     String 用户 id</li>
<li>password         String 用户密码</li>
</ul>
<p>示例 : <code>GET localhost:3000/api/v1/auth/local?id=44220&amp;password=44220</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"44220"</span>,</div><div class="line">  <span class="attr">"role"</span>: <span class="string">"high-level"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"干事 1"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"accessToken"</span>: <span class="string">"d827b0ef-4e21-4cb7-b89f-c0b601fbe4b1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="重置密码"><a href="# 重置密码" class="headerlink" title="重置密码"></a>重置密码 <!-- 这边应该用 PUT , 因为用户更新了密码 --></h2><p> <code>/users/changePassword</code> POST 重置用户密码，重新生成盐值和 hash 存储到数据库中，返回修改后的用户基本信息 <br> 接受参数:</p>
<ul>
<li>id     String 用户 id</li>
<li>password         String 用户密码</li>
<li>new_password         String 新的用户密码</li>
</ul>
<p>示例 : <code>POST localhost:3000/api/v1/users/changePassword</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"44220"</span>,</div><div class="line">  <span class="attr">"role"</span>: <span class="string">"high-level"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"干事 1"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"accessToken"</span>: <span class="string">"d827b0ef-4e21-4cb7-b89f-c0b601fbe4b1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获得用户信息 - 这边应该用 -users-id"><a href="# 获得用户信息 - 这边应该用 -users-id" class="headerlink" title="获得用户信息 // 这边应该用 /users/:id"></a>获得用户信息 // 这边应该用 /users/:id</h2><p><code>/users/details</code> GET 获取用户详细信息, 如最近的主题以及最近的回复</p>
<p>接受参数:</p>
<ul>
<li>access_token         String 用户的 token</li>
</ul>
<p>示例 :  <code>GET localhost:3000/api/v1/users/details?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">  <span class="attr">"role"</span>: <span class="string">"low-level"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"海陵区城西街道情报员"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"高月"</span>,</div><div class="line">  <span class="attr">"recent_posts"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"_id"</span>: <span class="string">"564aef7bd443b5243c7e826b"</span>,</div><div class="line">      <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">      <span class="attr">"content"</span>: <span class="string">"测试情报"</span>,</div><div class="line">      <span class="attr">"important"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:27.217Z"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"recent_replies"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"_id"</span>: <span class="string">"564aef8fd443b5243c7e826d"</span>,</div><div class="line">      <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">      <span class="attr">"content"</span>: <span class="string">"呵呵"</span>,</div><div class="line">      <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:47.664Z"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"_id"</span>: <span class="string">"564aef85d443b5243c7e826c"</span>,</div><div class="line">      <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">      <span class="attr">"content"</span>: <span class="string">"评论一个"</span>,</div><div class="line">      <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:37.741Z"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="情报信息"><a href="# 情报信息" class="headerlink" title="情报信息"></a>情报信息 </h1><h2 id="获取情报列表"><a href="# 获取情报列表" class="headerlink" title="获取情报列表"></a> 获取情报列表</h2><p><code>/posts</code> GET 获取帖子列表</p>
<p>接受参数:</p>
<ul>
<li>limit     Number 每页的情报数量</li>
<li>page         Number 页数</li>
<li>access_token         String 用户的 token</li>
</ul>
<p>示例: <code>GET localhost:3000/api/v1/posts?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6&amp;limit=5&amp;page=1</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"_id"</span>: <span class="string">"564aef7bd443b5243c7e826b"</span>,</div><div class="line">    <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">    <span class="attr">"content"</span>: <span class="string">"测试情报"</span>,</div><div class="line">    <span class="attr">"important"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:27.217Z"</span>,</div><div class="line">    <span class="attr">"author"</span>: &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"高月"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"_id"</span>: <span class="string">"564ae2c08bb772bf39386e2b"</span>,</div><div class="line">    <span class="attr">"author_id"</span>: <span class="string">"44121"</span>,</div><div class="line">    <span class="attr">"content"</span>: <span class="string">"hello"</span>,</div><div class="line">    <span class="attr">"important"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T08:18:08.800Z"</span>,</div><div class="line">    <span class="attr">"author"</span>: &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="获取某个帖子的具体内容"><a href="# 获取某个帖子的具体内容" class="headerlink" title="获取某个帖子的具体内容"></a>获取某个帖子的具体内容</h2><p><code>/posts/:id</code> GET 获取某个帖子的具体内容</p>
<p>接受参数:</p>
<ul>
<li>id    String 帖子的 id</li>
<li>access_token         String 用户的 token</li>
</ul>
<p>示例: <code>GET localhost:3000/api/v1/posts/564aef7bd443b5243c7e826b?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"_id"</span>: <span class="string">"564aef7bd443b5243c7e826b"</span>,</div><div class="line">  <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">  <span class="attr">"content"</span>: <span class="string">"测试情报"</span>,</div><div class="line">  <span class="attr">"important"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"photos"</span>: [],</div><div class="line">  <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:27.217Z"</span>,</div><div class="line">  <span class="attr">"author"</span>: &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"高月"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"replies"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"_id"</span>: <span class="string">"564aef85d443b5243c7e826c"</span>,</div><div class="line">      <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">      <span class="attr">"post_id"</span>: <span class="string">"564aef7bd443b5243c7e826b"</span>,</div><div class="line">      <span class="attr">"content"</span>: <span class="string">"评论一个"</span>,</div><div class="line">      <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:37.741Z"</span>,</div><div class="line">      <span class="attr">"author"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"高月"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"_id"</span>: <span class="string">"564aef8fd443b5243c7e826d"</span>,</div><div class="line">      <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">      <span class="attr">"post_id"</span>: <span class="string">"564aef7bd443b5243c7e826b"</span>,</div><div class="line">      <span class="attr">"content"</span>: <span class="string">"呵呵"</span>,</div><div class="line">      <span class="attr">"create_at"</span>: <span class="string">"2015-11-17T09:12:47.664Z"</span>,</div><div class="line">      <span class="attr">"author"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"高月"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建情报"><a href="# 创建情报" class="headerlink" title="创建情报"></a>创建情报</h2><p><code>/posts</code> POST 创建情报，返回情报基本内容</p>
<p>参数: </p>
<ul>
<li>content    String 帖子的内容, 不能为空</li>
<li>important     Boolean 是否为紧急情报，默认为 false</li>
<li>photos     [String] 情报的配图，目前默认只能上传一张</li>
<li>access_token        String 用户的 token</li>
</ul>
<p>示例: <code>POST localhost:3000/api/v1/posts?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"_id"</span>: <span class="string">"564c34da38cad35f288846c9"</span>,</div><div class="line">  <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">  <span class="attr">"content"</span>: <span class="string">"测试消息 from postman"</span>,</div><div class="line">  <span class="attr">"important"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"create_at"</span>: <span class="string">"2015-11-18T08:20:42.379Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除情报"><a href="# 删除情报" class="headerlink" title="删除情报"></a>删除情报</h2><p><code>/posts/:id</code> DELETE 删除情报，返回空文档。</p>
<p>接受参数:</p>
<ul>
<li>id     String 待删除的情报的 id</li>
<li>access_token         String 用户的 token</li>
</ul>
<p>示例: <code>DELETE localhost:3000/api/v1/posts/564c34da38cad35f288846c9?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6</code></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>
<h1 id="回复"><a href="# 回复" class="headerlink" title="回复"></a>回复 </h1><h2 id="创建回复"><a href="# 创建回复" class="headerlink" title="创建回复"></a> 创建回复</h2><p><code>replys</code> POST 创建一个回复，返回该回复</p>
<p>接受参数:</p>
<ul>
<li>post_id         String  回复的情报的 id</li>
<li>content         String  回复内容</li>
<li>access_token     String  用户的 token</li>
</ul>
<p>示例: <code>POST localhost:3000/api/v1/replys?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"_id"</span>: <span class="string">"564c7234d1739e4f0b056796"</span>,</div><div class="line">  <span class="attr">"post_id"</span>: <span class="string">"564c65c34086d9a105d78243"</span>,</div><div class="line">  <span class="attr">"content"</span>: <span class="string">"添加一条回复"</span>,</div><div class="line">  <span class="attr">"author_id"</span>: <span class="string">"13852862738"</span>,</div><div class="line">  <span class="attr">"create_at"</span>: <span class="string">"2015-11-18T12:42:28.692Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除回复"><a href="# 删除回复" class="headerlink" title="删除回复"></a>删除回复</h2><p><code>replys/:id</code> DELETE 删除某个回复, 返回空文档</p>
<p>接受参数:</p>
<ul>
<li>id String 该回复的 id</li>
<li>access_token String 用户的 token</li>
</ul>
<p>示例: <code>DELETE localhost:3000/api/v1/replys/564c7234d1739e4f0b056796?access_token=e25be7a2-0553-4104-a210-bde3873bfdb6</code></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇为凤城卫士的API文档，包括其url,接受的参数，示例url以及返回值示例。对于REST API的 设计感兴趣的可以移步&lt;a href=&quot;http://mclspace.com/2015/11/03/restful-note/&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注: 本篇中的url均具有前缀 &lt;em&gt;/api/v1&lt;/em&gt; ,这里为简便起见，进行了省略.&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://nap-blog.artemisprojects.org/categories/web/"/>
    
    
      <category term="web" scheme="http://nap-blog.artemisprojects.org/tags/web/"/>
    
      <category term="api" scheme="http://nap-blog.artemisprojects.org/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Spring Transaction Manager 学习笔记</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-spring-transaction-manager/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-spring-transaction-manager/</id>
    <published>2015-11-09T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.909Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Spring 声明式事务处理，是通过结合 IoC 容器和 Spring 已有的 TransactionProxyFactoryBean 来对事务管理进行配置。<br>在 TransactionProxyFactoryBean 中为事务方法配置传播行为、并发事务隔离级别这些事务处理的属性，<br>从而对声明式事务的处理提供指导。<br>声明式事务处理的实现，大致可以分为以下三个部分：</p>
<ul>
<li>读取和处理在 IoC 容器中配置的事务处理属性， 并转为 Spring 事务处理需要的内部数据结构。</li>
<li>Spring 事务处理模块实现的统一的事务处理过程。包含了处理事务配置属性，以及与现场绑定完成事务处理。Spring 通过 TransactionInfo 和 TransactionStatus 两个数据对象，在事务处理过程中记录和传递相关执行场景。</li>
<li>对于底层的事务操作，Spring 委托给具体的事务处理器来完成，即 PlatformTransactionManager 的具体实现。比如 DataSourceTransactionManager 和 HibernateTransactionManager。</li>
</ul>
<a id="more"></a>
<hr>
<h2 id="声明式事务处理的基本过程"><a href="# 声明式事务处理的基本过程" class="headerlink" title="声明式事务处理的基本过程"></a>声明式事务处理的基本过程 </h2><p> 使用 Spring 声明式事务处理，是通过结合 IoC 容器和 Spring 已有的 TransactionProxyFactoryBean 来对事务管理进行配置。<br>在 TransactionProxyFactoryBean 中为事务方法配置传播行为、并发事务隔离级别这些事务处理的属性，<br>从而对声明式事务的处理提供指导。<br>声明式事务处理的实现，大致可以分为以下三个部分：</p>
<ul>
<li>读取和处理在 IoC 容器中配置的事务处理属性， 并转为 Spring 事务处理需要的内部数据结构。</li>
<li>Spring 事务处理模块实现的统一的事务处理过程。包含了处理事务配置属性，以及与现场绑定完成事务处理。Spring 通过 TransactionInfo 和 TransactionStatus 两个数据对象，在事务处理过程中记录和传递相关执行场景。</li>
<li>对于底层的事务操作，Spring 委托给具体的事务处理器来完成，即 PlatformTransactionManager 的具体实现。比如 DataSourceTransactionManager 和 HibernateTransactionManager。</li>
</ul>
<h2 id="事务处理拦截器的配置"><a href="# 事务处理拦截器的配置" class="headerlink" title="事务处理拦截器的配置"></a>事务处理拦截器的配置 </h2><p> 配置工作，包括设置拦截器 TransactionInterceptor、通知器 DefaultPointcutAdvisor、<br>注入进来的 PlatformTransactionManager 和事务处理属性 TransactionAttribute。<br>这些工作是由 IoC 的 TransactionProxyFactoryBean 完成的。它的实现如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TransactionProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractSingletonProxyFactoryBean</span></span></div><div class="line">		implements <span class="type">BeanFactoryAware</span> &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 这个拦截器通过 AOP 发挥作用，通过这个拦截器，Spring 封装了事务处理实现</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">TransactionInterceptor</span> transactionInterceptor = <span class="keyword">new</span> <span class="type">TransactionInterceptor</span>();</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="type">Pointcut</span> pointcut;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the default transaction manager. This will perform actual</div><div class="line">	 * transaction management: This class is just a way of invoking it.</div><div class="line">	 * @see TransactionInterceptor#setTransactionManager</div><div class="line">	 */</div><div class="line">	public void setTransactionManager(<span class="type">PlatformTransactionManager</span> transactionManager) &#123;</div><div class="line">		<span class="keyword">this</span>.transactionInterceptor.setTransactionManager(transactionManager);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Creates an advisor for this FactoryBean's TransactionInterceptor.</div><div class="line">	 * 创建 Spring AOP 对事务处理的 AOP</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> <span class="type">Object</span> createMainInterceptor() &#123;</div><div class="line">		<span class="keyword">this</span>.transactionInterceptor.afterPropertiesSet();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.pointcut != <span class="literal">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">DefaultPointcutAdvisor</span>(<span class="keyword">this</span>.pointcut, <span class="keyword">this</span>.transactionInterceptor);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Rely on default pointcut.</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">TransactionAttributeSourceAdvisor</span>(<span class="keyword">this</span>.transactionInterceptor);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有上面的代码可以知道，TransactionInterceptor 在方法 <code>createMainInterceptor</code> 中被配置为 Advisor 通知器的一部分。<br>而 <code>createMainInterceptor</code> 方法在 IoC 容器完成 Bean 的注入依赖时，通过 <code>initiaizeBean</code> 方法被调用，调用过程如下图:<br><img src="/images/createMainInterceptor.png" alt=""></p>
<p>这个 <code>afterPropertiesSet</code> 方法的功能实现如下所示。从代码中可以看到，在建立 TransactionProxyFactoryBean 的事务 <br> 处理拦截器的时候，首先需要对 ProxyFactoryBean 的目标 Bean 设置进行检查，如果这个目标 Bean 的配置是正确的，<br>就会通过创建一个 ProxyFactory 对象，从而实现 AOP 的使用。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void afterPropertiesSet() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.target == <span class="literal">null</span>) &#123;</div><div class="line">    	<span class="keyword">throw</span> new IllegalArgumentException(<span class="string">"Property'target'is required"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.target instanceof String) &#123;</div><div class="line">    	<span class="keyword">throw</span> new IllegalArgumentException(<span class="string">"'target' needs to be a bean reference, not a bean name as value"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.proxyClassLoader == <span class="literal">null</span>) &#123;</div><div class="line">    	<span class="keyword">this</span>.proxyClassLoader = ClassUtils.getDefaultClassLoader();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//TransactionFactoryBean 使用 ProxyFactory 完成 AOP 的基本功能</span></div><div class="line">    ProxyFactory proxyFactory = new ProxyFactory();</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.preInterceptors != <span class="literal">null</span>) &#123;</div><div class="line">    	<span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.preInterceptors) &#123;</div><div class="line">    		proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// Add the main interceptor (typically an Advisor).</span></div><div class="line">    proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(createMainInterceptor()));</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.postInterceptors != <span class="literal">null</span>) &#123;</div><div class="line">    	<span class="keyword">for</span> (Object interceptor : <span class="keyword">this</span>.postInterceptors) &#123;</div><div class="line">    		proxyFactory.addAdvisor(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(interceptor));</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    proxyFactory.copyFrom(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// 设置目标源</span></div><div class="line">    TargetSource targetSource = createTargetSource(<span class="keyword">this</span>.target);</div><div class="line">    proxyFactory.setTargetSource(targetSource);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.proxyInterfaces != <span class="literal">null</span>) &#123;</div><div class="line">    	proxyFactory.setInterfaces(<span class="keyword">this</span>.proxyInterfaces);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!isProxyTargetClass()) &#123;</div><div class="line">    	<span class="comment">// Rely on AOP infrastructure to tell us what interfaces to proxy.</span></div><div class="line">    	proxyFactory.setInterfaces(</div><div class="line">    			ClassUtils.getAllInterfacesForClass(targetSource.getTargetClass(), <span class="keyword">this</span>.proxyClassLoader));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">this</span>.proxy = proxyFactory.getProxy(<span class="keyword">this</span>.proxyClassLoader);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事务处理拦截器的实现"><a href="# 事务处理拦截器的实现" class="headerlink" title="事务处理拦截器的实现"></a>事务处理拦截器的实现 </h2><p> 对事务方法的拦截是通过 <code>invoke</code> 方法，它使 Proxy 代理对象的回调方法。在事务处理拦截器 TransactionInterceptor 中，<br><code>invoke</code>方法的实现代码如下。可以看到，首先获得调用方法的事务处理配置，之后取得配置的 PlatformTransactionManager<br>, 由这个事务处理器来实现事务的创建、提交、回滚操作。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">final</span> MethodInvocation invocation) <span class="keyword">throws</span> Throwable &#123;</div><div class="line">	<span class="comment">// Work out the target class: may be &#123;@code null&#125;.</span></div><div class="line">	<span class="comment">// The TransactionAttributeSource should be passed the target class</span></div><div class="line">	<span class="comment">// as well as the method, which may be from an interface.</span></div><div class="line">	Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</div><div class="line"></div><div class="line">	<span class="comment">// Adapt to TransactionAspectSupport's invokeWithinTransaction...</span></div><div class="line">	<span class="keyword">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, <span class="keyword">new</span> InvocationCallback() &#123;</div><div class="line">		@Override</div><div class="line">		<span class="keyword">public</span> <span class="keyword">Object</span> proceedWithInvocation() <span class="keyword">throws</span> Throwable &#123;</div><div class="line">			<span class="keyword">return</span> invocation.proceed();</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> invokeWithinTransaction(Method method, Class&lt;?&gt; targetClass, <span class="keyword">final</span> InvocationCallback invocation)</div><div class="line">		<span class="keyword">throws</span> Throwable &#123;</div><div class="line"></div><div class="line">	<span class="comment">// If the transaction attribute is null, the method is non-transactional.</span></div><div class="line">	<span class="keyword">final</span> TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass);</div><div class="line">	<span class="keyword">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);</div><div class="line">	<span class="keyword">final</span> <span class="keyword">String</span> joinpointIdentification = methodIdentification(method, targetClass);</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 区分不同类型的 PlatformTransactionManager, 因为他们的调用方式不同，</div><div class="line">	 * 像 DataSourceTransactionManager 来说，不是 CallbackPreferringPlatformTransactionManager,</div><div class="line">	 * 不需要通过回调的方式来使用。</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (txAttr == <span class="keyword">null</span> || !(tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</div><div class="line">		<span class="comment">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></div><div class="line">		<span class="comment">//TransactionInfo 是保存当前事务状态的对象</span></div><div class="line">		TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</div><div class="line">		<span class="keyword">Object</span> retVal = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// This is an around advice: Invoke the next interceptor in the chain.</span></div><div class="line">			<span class="comment">// This will normally result in a target object being invoked.</span></div><div class="line">			retVal = invocation.proceedWithInvocation();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="comment">// target invocation exception</span></div><div class="line">			completeTransactionAfterThrowing(txInfo, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			cleanupTransactionInfo(txInfo);</div><div class="line">		&#125;</div><div class="line">		commitTransactionAfterReturning(txInfo);</div><div class="line">		<span class="keyword">return</span> retVal;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		.....</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>## 事务的创建 <br> 我们注意到 TransactionInterceptor 拦截器的 <code>invoke</code> 回调中使用的 <code>createTransactionIfNecessary</code> 方法，它是事务创建的起点。它的实现代码如下。在 <code>createTransactionIfNecessary</code> 方法调用中，可以看到两个重要的数据对象 TransactionStatus 和 TransactionInfo 的调用，这两个对象持有的 <br> 数据是事务处理器对事务进行处理的主要依据，对他们的使用贯穿着整个事务处理的过程。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function">TransactionInfo <span class="title">createTransactionIfNecessary</span><span class="params">(</span></span></div><div class="line">		PlatformTransactionManager tm, TransactionAttribute txAttr, <span class="keyword">final</span> String joinpointIdentification) &#123;</div><div class="line"></div><div class="line">	<span class="comment">// If no name specified, apply method identification as transaction name.</span></div><div class="line">	<span class="keyword">if</span> (txAttr != <span class="keyword">null</span> &amp;&amp; txAttr.getName() == <span class="keyword">null</span>) &#123;</div><div class="line">		txAttr = <span class="keyword">new</span> DelegatingTransactionAttribute(txAttr) &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="keyword">public</span> <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> joinpointIdentification;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	TransactionStatus status = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (txAttr != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (tm != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * 这里使用我们定义好的事务方法的配置信息。</div><div class="line">			 * 事务创建由事务处理器来完成，同时返回 TransactionStatus 来记录</div><div class="line">			 * 当前的事务状态，包括已经创建的事务。</div><div class="line">			 */</div><div class="line">			status = tm.getTransaction(txAttr);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Skipping transactional joinpoint ["</span> + joinpointIdentification +</div><div class="line">						<span class="string">"] because no transaction manager has been configured"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 准备 TransactionInfo，它封装了事务处理的配置信息以及 TransactionStatus</span></div><div class="line">	<span class="function"><span class="keyword">return</span> <span class="title">prepareTransactionInfo</span><span class="params">(tm, txAttr, joinpointIdentification, status)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function">TransactionInfo <span class="title">prepareTransactionInfo</span><span class="params">(PlatformTransactionManager tm,</span></span></div><div class="line">		TransactionAttribute txAttr, String joinpointIdentification, TransactionStatus status) &#123;</div><div class="line"></div><div class="line">	TransactionInfo txInfo = <span class="keyword">new</span> TransactionInfo(tm, txAttr, joinpointIdentification);</div><div class="line">	<span class="keyword">if</span> (txAttr != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">// We need a transaction for this method</span></div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Getting transaction for ["</span> + txInfo.getJoinpointIdentification() + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// The transaction manager will flag an error if an incompatible tx already exists</span></div><div class="line">		txInfo.newTransactionStatus(status);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// The TransactionInfo.hasTransaction() method will return</span></div><div class="line">		<span class="comment">// false. We created it only to preserve the integrity of</span></div><div class="line">		<span class="comment">// the ThreadLocal stack maintained in this class.</span></div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled())</div><div class="line">			logger.trace(<span class="string">"Don't need to create transaction for ["</span> + joinpointIdentification +</div><div class="line">					<span class="string">"]: This method isn't transactional."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// We always bind the TransactionInfo to the thread, even if we didn't create</span></div><div class="line">	<span class="comment">// a new transaction here. This guarantees that the TransactionInfo stack</span></div><div class="line">	<span class="comment">// will be managed correctly even if no transaction was created by this aspect.</span></div><div class="line">	txInfo.bindToThread();</div><div class="line">	<span class="keyword">return</span> txInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在以上的处理过程完成以后，可以看到具体的事务创建就交给事务处理器来完成了。下面看事务处理器中去了解 <br> 一下更底层的事务创建过程，它被上述代码的 <code>tm.getTransaction(txAttr)</code> 调用出发，生成一个 TransactionStatus 对象，<br>封装了底层事务对象的创建。在 AbstractPlatformTransactionManager 中，提供了创建事务的模板，代码如下所示。<br>AbstractPlatformTransactionManager 会根据事务属性配置和当前线程绑定的事务信息，对事务是否需要创建、怎样创建 <br> 进行一些通用的处理，然后把事务创建的底层工作交给具体的事务处理器完成(如 DataSourceTransactionManagera)。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 这个 doGetTransaction 是抽象函数，Transaction 对象的取得由具体的事务处理器实现。</div><div class="line">	 * 比如 DataSourceTransactionManager</div><div class="line">	 */</div><div class="line">	Object transaction = doGetTransaction();</div><div class="line"></div><div class="line">	<span class="comment">// Cache debug flag to avoid repeated checks.</span></div><div class="line">	<span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (definition == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 使用默认的 DefaultTransactionDefinition：</div><div class="line">		 * propagationBehavior=PROPAGATION_REQUIRED</div><div class="line">		 * isolationLevel=ISOLATION_DEFAULT;</div><div class="line">		 * timeout=TIMEOUT_DEFAULT;</div><div class="line">		 * readOnly=false;</div><div class="line">		 */</div><div class="line">		<span class="comment">// Use defaults if no transaction definition given.</span></div><div class="line">		definition = <span class="keyword">new</span> DefaultTransactionDefinition();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 如果当前线程存在事务，需要根据事务传播属性生成事务</span></div><div class="line">	<span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;</div><div class="line">		<span class="comment">// Existing transaction found -&gt; check propagation behavior to find out how to behave.</span></div><div class="line">		<span class="function"><span class="keyword">return</span> <span class="title">handleExistingTransaction</span><span class="params">(definition, transaction, debugEnabled)</span></span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Check definition settings for new transaction.</span></div><div class="line">	<span class="keyword">if</span> (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> InvalidTimeoutException(<span class="string">"Invalid transaction timeout"</span>, definition.getTimeout());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span></div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</div><div class="line">				<span class="string">"No existing transaction found for transaction marked with propagation'mandatory'"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</div><div class="line">			definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</div><div class="line">			definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</div><div class="line">		SuspendedResourcesHolder suspendedResources = suspend(<span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">			logger.debug(<span class="string">"Creating new transaction with name ["</span> + definition.getName() + <span class="string">"]: "</span> + definition);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</div><div class="line">			DefaultTransactionStatus status = newTransactionStatus(</div><div class="line">					definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, suspendedResources);</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * 这里是创建事务的调用，由具体的事务处理器完成，比如：</div><div class="line">			 * HibernateTransactionManager 和 DataSourceTransactionManager</div><div class="line">			 */</div><div class="line">			doBegin(transaction, definition);</div><div class="line">			prepareSynchronization(status, definition);</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">			resume(<span class="keyword">null</span>, suspendedResources);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">			resume(<span class="keyword">null</span>, suspendedResources);</div><div class="line">			<span class="keyword">throw</span> err;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// Create"empty"transaction: no actual transaction, but potentially synchronization.</span></div><div class="line">		<span class="keyword">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</div><div class="line">			logger.warn(<span class="string">"Custom isolation level specified but no actual transaction initiated; "</span> +</div><div class="line">					<span class="string">"isolation level will effectively be ignored: "</span> + definition);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</div><div class="line">		<span class="function"><span class="keyword">return</span> <span class="title">prepareTransactionStatus</span><span class="params">(definition, <span class="keyword">null</span>, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>)</span></span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Create a TransactionStatus for an existing transaction.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function">TransactionStatus <span class="title">handleExistingTransaction</span><span class="params">(</span></span></div><div class="line">		TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> debugEnabled)</div><div class="line">		<span class="keyword">throws</span> TransactionException &#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</div><div class="line">				<span class="string">"Existing transaction found for transaction marked with propagation 'never'"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</div><div class="line">		<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">			logger.debug(<span class="string">"Suspending current transaction"</span>);</div><div class="line">		&#125;</div><div class="line">		Object suspendedResources = suspend(transaction);</div><div class="line">		<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</div><div class="line">		<span class="function"><span class="keyword">return</span> <span class="title">prepareTransactionStatus</span><span class="params">(</span></span></div><div class="line">				definition, <span class="keyword">null</span>, <span class="keyword">false</span>, newSynchronization, debugEnabled, suspendedResources);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</div><div class="line">		<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">			logger.debug(<span class="string">"Suspending current transaction, creating new transaction with name ["</span> +</div><div class="line">					definition.getName() + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		SuspendedResourcesHolder suspendedResources = suspend(transaction);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</div><div class="line">			DefaultTransactionStatus status = newTransactionStatus(</div><div class="line">					definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, suspendedResources);</div><div class="line">			doBegin(transaction, definition);</div><div class="line">			prepareSynchronization(status, definition);</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RuntimeException beginEx) &#123;</div><div class="line">			resumeAfterBeginException(transaction, suspendedResources, beginEx);</div><div class="line">			<span class="keyword">throw</span> beginEx;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Error beginErr) &#123;</div><div class="line">			resumeAfterBeginException(transaction, suspendedResources, beginErr);</div><div class="line">			<span class="keyword">throw</span> beginErr;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</div><div class="line">		<span class="keyword">if</span> (!isNestedTransactionAllowed()) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NestedTransactionNotSupportedException(</div><div class="line">					<span class="string">"Transaction manager does not allow nested transactions by default -"</span> +</div><div class="line">					<span class="string">"specify'nestedTransactionAllowed'property with value'true'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">			logger.debug(<span class="string">"Creating nested transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (useSavepointForNestedTransaction()) &#123;</div><div class="line">			<span class="comment">// Create savepoint within existing Spring-managed transaction,</span></div><div class="line">			<span class="comment">// through the SavepointManager API implemented by TransactionStatus.</span></div><div class="line">			<span class="comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span></div><div class="line">			DefaultTransactionStatus status =</div><div class="line">					prepareTransactionStatus(definition, transaction, <span class="keyword">false</span>, <span class="keyword">false</span>, debugEnabled, <span class="keyword">null</span>);</div><div class="line">			status.createAndHoldSavepoint();</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// Nested transaction through nested begin and commit/rollback calls.</span></div><div class="line">			<span class="comment">// Usually only for JTA: Spring synchronization might get activated here</span></div><div class="line">			<span class="comment">// in case of a pre-existing JTA transaction.</span></div><div class="line">			<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</div><div class="line">			DefaultTransactionStatus status = newTransactionStatus(</div><div class="line">					definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</div><div class="line">			doBegin(transaction, definition);</div><div class="line">			prepareSynchronization(status, definition);</div><div class="line">			<span class="keyword">return</span> status;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span></div><div class="line">	<span class="keyword">if</span> (debugEnabled) &#123;</div><div class="line">		logger.debug(<span class="string">"Participating in existing transaction"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (isValidateExistingTransaction()) &#123;</div><div class="line">		<span class="keyword">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</div><div class="line">			Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</div><div class="line">			<span class="keyword">if</span> (currentIsolationLevel == <span class="keyword">null</span> || currentIsolationLevel != definition.getIsolationLevel()) &#123;</div><div class="line">				Constants isoConstants = DefaultTransactionDefinition.constants;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">"Participating transaction with definition ["</span> +</div><div class="line">						definition + <span class="string">"] specifies isolation level which is incompatible with existing transaction: "</span> +</div><div class="line">						(currentIsolationLevel != <span class="keyword">null</span> ?</div><div class="line">								isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</div><div class="line">								<span class="string">"(unknown)"</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!definition.isReadOnly()) &#123;</div><div class="line">			<span class="keyword">if</span> (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(<span class="string">"Participating transaction with definition ["</span> +</div><div class="line">						definition + <span class="string">"] is not marked as read-only but existing transaction is"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</div><div class="line">	<span class="function"><span class="keyword">return</span> <span class="title">prepareTransactionStatus</span><span class="params">(definition, transaction, <span class="keyword">false</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="具体事务处理器的实现"><a href="# 具体事务处理器的实现" class="headerlink" title="具体事务处理器的实现"></a>具体事务处理器的实现 </h2><p> 下面，以 DataSourceTransactionManager 为例，简单介绍一下在具体的事务处理器中，是如何实现事务的创建、提交、<br>回滚这些底层的事务处理操作。在实现过程中，需要把数据库的 Connection 和当前的线程进行绑定。对于事务的提交 <br> 和回滚，都是直接调用 Connection 的提交和回滚方法来完成。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTransactionManager</span> <span class="keyword">extends</span> <span class="title">AbstractPlatformTransactionManager</span></span></div><div class="line">		implements <span class="type">ResourceTransactionManager</span>, <span class="type">InitializingBean</span> &#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="type">DataSource</span> dataSource;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> <span class="type">Object</span> doGetTransaction() &#123;</div><div class="line">		<span class="type">DataSourceTransactionObject</span> txObject = <span class="keyword">new</span> <span class="type">DataSourceTransactionObject</span>();</div><div class="line">		txObject.setSavepointAllowed(isNestedTransactionAllowed());</div><div class="line">		<span class="type">ConnectionHolder</span> conHolder =</div><div class="line">				(<span class="type">ConnectionHolder</span>) <span class="type">TransactionSynchronizationManager</span>.getResource(<span class="keyword">this</span>.dataSource);</div><div class="line">		txObject.setConnectionHolder(conHolder, <span class="literal">false</span>);</div><div class="line">		<span class="keyword">return</span> txObject;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>TransactionSynchronizationManager 保存了线程级别的变量，当处于同一个事务的方法调用 doGetTransaction 时，getResource 方法返回的是同一个 ConnectionHolder</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> class TransactionSynchronizationManager &#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(TransactionSynchronizationManager.class);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;<span class="keyword">Object</span>, <span class="keyword">Object</span>&gt;&gt; resources =</div><div class="line">			<span class="keyword">new</span> NamedThreadLocal&lt;Map&lt;<span class="keyword">Object</span>, <span class="keyword">Object</span>&gt;&gt;(<span class="string">"Transactional resources"</span>);</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Retrieve a resource for the given key that is bound to the current thread.</div><div class="line">	 * @param key the key to check (usually the resource factory)</div><div class="line">	 * @return a value bound to the current thread (usually the active</div><div class="line">	 * resource object), or &#123;@code null&#125; if none</div><div class="line">	 * @see ResourceTransactionManager#getResourceFactory()</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">Object</span> getResource(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</div><div class="line">		<span class="keyword">Object</span> actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(<span class="built_in">key</span>);</div><div class="line">		<span class="keyword">Object</span> value = doGetResource(actualKey);</div><div class="line">		<span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Retrieved value ["</span> + value + <span class="string">"] for key ["</span> + actualKey + <span class="string">"] bound to thread ["</span> +</div><div class="line">					Thread.currentThread().getName() + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Actually check the value of the resource that is bound for the given key.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">Object</span> doGetResource(<span class="keyword">Object</span> actualKey) &#123;</div><div class="line">		Map&lt;<span class="keyword">Object</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = resources.<span class="built_in">get</span>();</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">map</span> == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">Object</span> value = <span class="built_in">map</span>.<span class="built_in">get</span>(actualKey);</div><div class="line">		<span class="comment">// Transparently remove ResourceHolder that was marked as void...</span></div><div class="line">		<span class="keyword">if</span> (value <span class="keyword">instanceof</span> ResourceHolder &amp;&amp; ((ResourceHolder) value).isVoid()) &#123;</div><div class="line">			<span class="built_in">map</span>.remove(actualKey);</div><div class="line">			<span class="comment">// Remove entire ThreadLocal if empty...</span></div><div class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>.isEmpty()) &#123;</div><div class="line">				resources.remove();</div><div class="line">			&#125;</div><div class="line">			value = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> value;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Spring声明式事务处理，是通过结合IoC容器和Spring已有的TransactionProxyFactoryBean来对事务管理进行配置。&lt;br&gt;在TransactionProxyFactoryBean中为事务方法配置传播行为、并发事务隔离级别这些事务处理的属性，&lt;br&gt;从而对声明式事务的处理提供指导。&lt;br&gt;声明式事务处理的实现，大致可以分为以下三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取和处理在IoC容器中配置的事务处理属性， 并转为Spring事务处理需要的内部数据结构。&lt;/li&gt;
&lt;li&gt;Spring事务处理模块实现的统一的事务处理过程。包含了处理事务配置属性，以及与现场绑定完成事务处理。Spring通过TransactionInfo和TransactionStatus两个数据对象，在事务处理过程中记录和传递相关执行场景。&lt;/li&gt;
&lt;li&gt;对于底层的事务操作，Spring委托给具体的事务处理器来完成，即PlatformTransactionManager的具体实现。比如DataSourceTransactionManager和HibernateTransactionManager。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TVDCR" scheme="http://nap-blog.artemisprojects.org/categories/TVDCR/"/>
    
    
      <category term="spring" scheme="http://nap-blog.artemisprojects.org/tags/spring/"/>
    
      <category term="transacion" scheme="http://nap-blog.artemisprojects.org/tags/transacion/"/>
    
      <category term="dynamic reconfiguration" scheme="http://nap-blog.artemisprojects.org/tags/dynamic-reconfiguration/"/>
    
  </entry>
  
  <entry>
    <title>OpenStack 与 DevStack 初探</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-devstack-1/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-devstack-1/</id>
    <published>2015-11-09T09:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.906Z</updated>
    
    <content type="html"><![CDATA[<p>本文会简单介绍一下 OpenStack 平台，它的手动部署方法，以及使用 devstack 脚本自动化部署的方法。</p>
<a id="more"></a>
<hr>
<h2 id="OpenStack 简介"><a href="#OpenStack 简介" class="headerlink" title="OpenStack 简介"></a>OpenStack 简介</h2><p>OpenStack 是一个开元的云计算管理平台项目，由几个主要的组件组合起来完成具体任务。OpenStack 支持几乎所有类型的云环境，它的目标是提供实施简单、可大规模扩展、丰富、标准统一的云计算管理平台。它的主要组件及相应的功能如下图所示：</p>
<p><img src="/images/openstack-service.png" alt=""></p>
<h3 id="手动搭建 OpenStack 平台"><a href="# 手动搭建 OpenStack 平台" class="headerlink" title="手动搭建 OpenStack 平台"></a>手动搭建 OpenStack 平台 </h3><p> 我们选择的平台是 Ubuntu14.04。根据 <a href="http://docs.openstack.org/liberty/install-guide-ubuntu/" target="_blank" rel="external"> 官方文档 </a>，我们可以手动部署 OpenStack 的各个服务组件。在部署服务之前，需要首先安装 NTP，以及数据库和消息队列组件。其中 NTP 是为了保证集群中的所有结点有一个全局时钟。而数据库存放每个服务的数据等信息，OpenStack 支持 MySQL 和 MongoDB。消息队列被用来协调各个服务之间的操作和状态，一般用<a href="http://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> 实现。</p>
<p>每个服务的安装部署过程都比较类似。首先会建立一个数据库，然后建立一个用户，接着安装依赖的包等等。最后手动修改配置文件(主要为 /etc/service_name/service_name.conf)。</p>
<h2 id="DevStack 简介"><a href="#DevStack 简介" class="headerlink" title="DevStack 简介"></a>DevStack 简介</h2><p>DevStack 实际上是一个 shell 脚本，可以用来快速搭建 OpenStack 的运行和开发环境，但是 devstack 并不适合用在生产环境中，它比较适合 OpenStack 开发者下载最新的 OpenStack 代码迅速在自己的笔记本上搭建一个开发环境出来。</p>
<h3 id="使用 DevStack 脚本进行一键部署"><a href="# 使用 DevStack 脚本进行一键部署" class="headerlink" title="使用 DevStack 脚本进行一键部署"></a>使用 DevStack 脚本进行一键部署 </h3><p> 使用 devstack 脚本很简单，安装 git，然后下载 devstack 代码到本地，运行 stack.sh 脚本一次设定 MySQL, RabbitMQ, OpenStack Dashboard 和 Keystone 的密码，密码输入后 stack.sh 脚本会自动开始安装必要的软件包和库并下载最新的 OpenStack 及其组件代码，整个过程无需干预。devstack 的下载方式：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://git.openstack.org/openstack-dev/devstack</div></pre></td></tr></table></figure>
<p>Devstack 的默认配置文件都保存在 stackrc 文件中，我们也可以创建一个 localrc 文件来修改他的默认设置。它的使用比较简单，但是它的脚本代码一点都不简单，因为它要维护支持多 Linux 发行版。通过阅读脚本，并且与 stack.sh 源码对照。将整个过程自动分为以下若干步骤：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">清楚上次 devstack 脚本运行的缓存。</div><div class="line">根据 stackrc/localrc 等配置文件加载一些系统变量及其他配置选项 </div><div class="line"> 载入本地变量，根据不同的 Linux 版本进行不同的操作。（详细的操作步骤目前还不是特别熟悉，需要的时候再看）</div><div class="line">配置安装及 <span class="built_in">log</span> 目录等信息。</div><div class="line">预先设定错误处理过程，即如果在脚本运行过程中发生错误，需要在退出前进行哪些操作。</div><div class="line">导入每个 OpenStack 服务所需要的 plugins 或是安装服务所用到的 libraries 及 functions。</div><div class="line">交互配置，及提供 MySQL,RabbitMQ,Dashboard 以及 Keystone 的密码。</div><div class="line">安装 database 及队列 <span class="built_in">queue</span>。</div><div class="line"> 安装配置本地的 python 环境。</div><div class="line">安装 service client。</div><div class="line">安装 service middleware（即每个需要安装的具体服务）。</div><div class="line">初始化并启动这些服务。</div><div class="line">保存安装过程退出后，在运行时可能用到的信息，如相关的系统变量等等。</div><div class="line">打印安装完成的信息。</div></pre></td></tr></table></figure>
<h3 id="对比 devstack 部署以及手动部署的过程，以 nova 服务为例。"><a href="# 对比 devstack 部署以及手动部署的过程，以 nova 服务为例。" class="headerlink" title="对比 devstack 部署以及手动部署的过程，以 nova 服务为例。"></a>对比 devstack 部署以及手动部署的过程，以 nova 服务为例。</h3><h4 id="手动部署"><a href="# 手动部署" class="headerlink" title="手动部署"></a>手动部署</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> nova DATABASE;</div><div class="line"><span class="keyword">CREATE</span> nova Users;</div><div class="line"><span class="keyword">CREATE</span> compute service API endpoint;</div><div class="line">apt-get install $(packages);</div><div class="line">vim /etc/nova/nova.conf;</div><div class="line">service $(*) restart;</div></pre></td></tr></table></figure>
<h4 id="自动部署 -stack-sh"><a href="# 自动部署 -stack-sh" class="headerlink" title="自动部署 (stack.sh)"></a> 自动部署(stack.sh)</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Line756, install_nov<span class="built_in">a_client</span>.</div><div class="line">Line811, stack_install_nova, 这两个函数主要进行的就是 git clone 和 pip install, 即下载安装所需依赖包。</div><div class="line">Line815, configure_nova，主要对 /etc/nova/nova.conf 进行配置。</div><div class="line">Line1131, init_nova, 主要进行初始化数据库等。</div><div class="line">Line1252, start_nova，启动 nova 服务。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文会简单介绍一下OpenStack平台，它的手动部署方法，以及使用devstack脚本自动化部署的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="OpenStack" scheme="http://nap-blog.artemisprojects.org/categories/OpenStack/"/>
    
    
      <category term="openstack" scheme="http://nap-blog.artemisprojects.org/tags/openstack/"/>
    
      <category term="devstack" scheme="http://nap-blog.artemisprojects.org/tags/devstack/"/>
    
  </entry>
  
  <entry>
    <title>Restful Api for NAP</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-nap-restapi/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-nap-restapi/</id>
    <published>2015-11-09T07:54:17.000Z</published>
    <updated>2016-04-06T03:06:29.908Z</updated>
    
    <content type="html"><![CDATA[<p>NAP 的 restful api 是通过 JSON 来对平台进行管理，包括平台硬件的监控、应用的创建、状态的查询以及文件管理等。restful api 是通过 Django 自身提供的 <a href="http://www.django-rest-framework.org/" target="_blank" rel="external">REST framework</a> 实现的，详见链接。</p>
<a id="more"></a>
<h2 id="app-api- 应用的状态信息"><a href="#app-api- 应用的状态信息" class="headerlink" title="app_api: 应用的状态信息"></a>app_api: 应用的状态信息 </h2><p> 该部分是对运行在 NAP 平台上的应用进行管理的接口，包括应用和服务的创建、应用状态的获取以及应用的开启和暂停等。</p>
<p>所有请求使用 token 进行认证，既用户进行信息的请求前，需要先认证，即下面 5 对应的操作，认证成功后，在进行请求时，需要将 token 置于 Http 的头部字段 Authorizations 中，curl 和 httpie 对应的示例如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:8000/app</span><span class="regexp">/porjects/</span> -H <span class="string">'Authorizations:Token d83***3d8'</span></div><div class="line"></div><div class="line">http <span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:8000/app</span><span class="regexp">/projects/</span> <span class="symbol">Authorizations:</span><span class="string">'Token d83***3d8'</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>projects 的请求<br> - 方法: GET<br> - url: /app/projects<br> - 参数: {‘username’:xxx, ‘start’:xxx, ‘limit’:xxx}<br> - 返回值:<br>   参数错误时，返回 400<br>   token 错误时，返回 401 UNAUTHORIZED<br>   参数正确，返回 Json 格式数据</p>
<pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">   &#123;</div><div class="line">    <span class="attr">"items"</span>: [</div><div class="line">        [</div><div class="line">               <span class="string">"test"</span>,</div><div class="line">               <span class="string">"git@github.com:monkey-H/rest_app.git"</span></div><div class="line">        ],</div><div class="line">           [</div><div class="line">               <span class="string">"test2"</span>,</div><div class="line">               <span class="string">"git@github.com:monkey-H/rest_app.git"</span></div><div class="line">           ],</div><div class="line"></div><div class="line">    ],</div><div class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"success"</span>: <span class="string">"true"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>projects 创建<br> - 方法: POST<br> - url: /app/projects<br> - 参数: {‘username’:xxx, ‘project’:xxx, ‘url’:xxx}<br> - 返回值:<br>   请求参数错误情况下返回 400<br>   token 错误时，返回 401 UNAUTHORIZED<br>   参数正确，根据提供的参数，返回相应的信息</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">log</span>: something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>project 删除<br> - 方法: DELETE<br> - url: /app/projects/exp_poj<br> - 参数: {}<br> - 返回值:<br>   token 错误时，返回 401 UNAUTHORIZED<br>   认证成功, 返回相应的信息</p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">Delete</span>: success/false</div><div class="line">    log: something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>一个 project 对应的 services 列表<br> - 方法: GET<br> - url: /app/projects/exp_poj<br> - 参数: {}<br> - 返回值:<br>   请求错误情况下返回 400<br>   token 认证错误返回 401 UNAUTHORIZED<br>   正确时，返回请求的实例，如下:   </p>
<pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   &#123;</div><div class="line">    <span class="attr">"items"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"ip"</span>: <span class="string">"114.212.189.140"</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"testmpi_1_master"</span>,</div><div class="line">               <span class="attr">"port"</span>: XX,</div><div class="line">               <span class="attr">"status"</span>: XX,</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"ip"</span>: <span class="string">"114.212.189.136"</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"testmpi_1_slaves@1"</span>,</div><div class="line">               <span class="attr">"port"</span>: XX,</div><div class="line">               <span class="attr">"status"</span>: XX,</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">       <span class="attr">"total"</span>: <span class="number">2</span>,</div><div class="line">       <span class="attr">"success"</span>: <span class="string">"true"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>用户认证使用的是 rest-framework 自带的 TokenAuthentication.<br> - 方法: Post<br> - url: /auth<br> - 参数: {‘username’:xxx, ‘password’:xxx}<br> - 返回值:<br>   请求正确，并成功认证返回    </p>
<pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">token</span>: *******</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>   请求错误时, 认证失败时会返回 400, 并给出相应的提示信息。<br> 使用 httpie 进行请求示例：</p>
 <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http --form post http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/app/</span>auth username=<span class="string">"***"</span> password=<span class="string">"***"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="filebrowser- 访问主机文件系统"><a href="#filebrowser- 访问主机文件系统" class="headerlink" title="filebrowser: 访问主机文件系统"></a>filebrowser: 访问主机文件系统 </h2><p> 该部分是从开源项目 <a href="https://github.com/revolunet/django-extjs-filebrowser" target="_blank" rel="external">django-extjs-filebrowser</a> 的后台 Django 部分直接迁移出来的，并没有使用 Django REST framework。</p>
<ol>
<li><p>请求一个文件夹下的目录树<br> - 方法: POST<br> - url: /fs/filebrowser/api/<br> - 参数: {‘cmd’: “get”, ‘path’: “key/path”}<br>  (key 为配置文件中主机提供的文件系统的根目录, 目前只有 localfolder 可选,path 为请求的路径)<br> - 返回值: json 格式数据，示例如下:   </p>
 <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ http --form POST http:<span class="regexp">//</span><span class="number">114.212</span><span class="number">.86</span><span class="number">.206</span>:<span class="number">8000</span>/fs<span class="regexp">/filebrowser/api/</span> cmd=<span class="string">"get"</span> path=<span class="string">"localfolder/new/"</span></div><div class="line">(请求 localfolder 对应的根目录下 <span class="keyword">new</span> 的目录树)</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"created_time"</span>: <span class="string">"2015-10-27T13:43:31.150469"</span>,</div><div class="line">        <span class="string">"iconCls"</span>: <span class="string">"icon-file-txt"</span>,</div><div class="line">        <span class="string">"items"</span>: [],</div><div class="line">        <span class="string">"leaf"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"modified_time"</span>: <span class="string">"2015-10-27T13:43:31.110469"</span>,</div><div class="line">        <span class="string">"size"</span>: <span class="number">12</span>,</div><div class="line">        <span class="string">"text"</span>: <span class="string">"hello6.txt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"created_time"</span>: <span class="string">"2015-11-09T09:11:14.739974"</span>,</div><div class="line">        <span class="string">"iconCls"</span>: <span class="string">"icon-file-jpg"</span>,</div><div class="line">        <span class="string">"items"</span>: [],</div><div class="line">        <span class="string">"leaf"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"modified_time"</span>: <span class="string">"2015-10-27T14:02:38.394490"</span>,</div><div class="line">        <span class="string">"size"</span>: <span class="number">925306</span>,</div><div class="line">        <span class="string">"text"</span>: <span class="string">"test.jpg"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>新建目录<br> - 方法: POST<br>   - url: fs/filebrowser/api/<br>   - 参数: {‘cmd’: “newdir”, ‘path’: “key/path”}<br>   - 返回值:<br> 参数正确时, 返回数据</p>
 <figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="symbol">'success</span>':<span class="literal">True</span>&#125;</div></pre></td></tr></table></figure>
<p> 否则根据情况返回 400,404  </p>
</li>
<li><p>重命名<br>   - 方法: POST<br>   - url: fs/filebrowser/api/<br>   - 参数: {‘cmd’: “rename”, ‘oldname’: “key/path”, ‘newname’: “key/path”}<br>   - 返回值:<br> 参数正确时, 返回{‘success’: True}, 错误时返回 400    </p>
</li>
<li><p>删除文件或文件夹<br> - 方法: POST<br> - url: fs/filebrowser/api/<br>   - 参数: {‘cmd’: “delete”,’path’: “key/path”}<br>   - 返回值:<br> 参数正确时, 返回{‘success’: True}, 错误时返回 404  </p>
</li>
<li><p>查看文件:<br>   - 方法: GET<br> - url: fs/filebrowser/api/<br>   - 参数: {‘cmd’: “view”, ‘file’: “key/path”}<br>   - 返回值:<br> 参数正确时, 返回文件的内容, 错误时返回 404  </p>
</li>
<li><p>下载文件:<br>   - 方法: GET<br>   - url: fs/filebrowser/api/<br>   - 参数: {‘cmd’: “download”, ‘file’: “key/path”}<br>   - 返回值:<br> 参数正确时, 下载文件, 错误时返回 404   </p>
</li>
<li><p>上传文件:<br> - 方法: POST<br> - url: /fs/upload/<br> - 参数, 请求方式有两种:</p>
<pre><code>* XMLHttpRequest:  
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://127.0.0.1:8000/fs/filebrowser/upload/'</span>, <span class="keyword">true</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">"X-File-Name"</span>,<span class="string">"localfolder/new/"</span> + <span class="keyword">file</span>.name);</div><div class="line">xhr.setRequestHeader(<span class="string">"X-Requested-With"</span>,<span class="string">"XMLHttpRequest"</span>);</div><div class="line">xhr.send(<span class="keyword">file</span>);</div></pre></td></tr></table></figure>

* 一般 post 请求  
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">formdata = <span class="keyword">new</span> FormData()</div><div class="line">formdata.<span class="keyword">append</span>(<span class="string">"path"</span>,<span class="string">"localfolder/new"</span>);</div><div class="line">formdata.<span class="keyword">append</span>(<span class="string">"file1"</span>,<span class="keyword">file</span>);</div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://127.0.0.1:8000/fs/filebrowser/upload/'</span>, <span class="keyword">true</span>);</div><div class="line">xhr.send(formdata);</div></pre></td></tr></table></figure>
</code></pre><p> - 返回值:<br> 参数等正确时，返回  </p>
 <figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">       <span class="string">"success"</span><span class="symbol">:True</span>,</div><div class="line">       files:&#123;&#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p> 请求错误时，返回 400 或 404 异常</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NAP的restful api是通过JSON来对平台进行管理，包括平台硬件的监控、应用的创建、状态的查询以及文件管理等。restful api是通过Django自身提供的&lt;a href=&quot;http://www.django-rest-framework.org/&quot;&gt;REST framework&lt;/a&gt;实现的，详见链接。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://nap-blog.artemisprojects.org/categories/web/"/>
    
    
      <category term="restful" scheme="http://nap-blog.artemisprojects.org/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>HBase ORM 以及 schema 设计</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-east-2/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-east-2/</id>
    <published>2015-11-08T08:00:32.000Z</published>
    <updated>2016-04-06T03:06:29.906Z</updated>
    
    <content type="html"><![CDATA[<p>近期在做从 oracle 到 HBase 的数据库迁移，接触到了 ORM 以及如何设计 HBase 的 schema，下面把这几天的学习成果记录下来。</p>
<a id="more"></a>
<hr>
<h1 id="schema 设计"><a href="#schema 设计" class="headerlink" title="schema 设计"></a>schema 设计</h1><p>schema 我的理解就是把逻辑上的数据模型和物理上的存储实现结合起来。考虑到 nosql 最大的特点在于横向扩展方便，结合 HBase 按列存储的特点（同一个 column family，CF）存储在同一个 store 中，它的 schema（schema 用词可能不准，因为它是 schemaless 的）设计主要考虑如何扩展方便、如何减少存储 / 查询开销。一般有如下三条设计原则 Denormalization、Duplication 和 Intelligent Keys。</p>
<h2 id="反序列化和复用"><a href="# 反序列化和复用" class="headerlink" title="反序列化和复用"></a>反序列化和复用 </h2><p> 相对于 sql 是把大表细分为小表，再通过 join 操作来合并成大表；nosql 往往是通过数据冗余把小表写大，两个实体共用同一个实现，也就是增加一些字段从而避免 join 问题，因为 nosql 存储廉价。其实 join 实质就是把多张小表合并成一张大表，对应 mongo 就是嵌套，对应 HBase/cassandra 就是把小表用更多的字段写大然后用 row key 连接起来。当数据量大的时候不 join 比 join 好是指合并的代价大于存储的代价，所以 nosql 通过反序列化刚好不用 join 才得以体现优势。hbasecon2012 上有一篇 HBase Schema Design（<a href="http://www.slideshare.net/cloudera/5-h-base-schemahbasecon2012" target="_blank" rel="external">how i learned to stop worrying and love denormalization</a>）详细介绍了 denormalization。</p>
<h2 id="rowkey 设计"><a href="#rowkey 设计" class="headerlink" title="rowkey 设计"></a>rowkey 设计 </h2><p> 因为 HBase 中数据是根据 rowkey 索引的，相近的 rowkey（默认是字典序）在同一个 regionserver 上，rowkey 设计主要考虑把同时使用的数据存放在一起，减少查询开销，这是根据业务需求定的。比如利用时间戳做 rowkey 的一部分（把 MAX_VALUE-timestamp 加到 rowkey 的最后）可以查询到最近使用的，再比如如下这个例子把关系型数据库中的两张表的主键合在一起。</p>
<p>一个订单例子的转变如下：<br><img src="/images/rdbms-1.png" alt=""><br><img src="/images/hbase-1.png"alt=""></p>
<p>从上面这个例子可以看出，在 rdbms 中，通常是通过 service order table 根据 customer 和 product 来 left join 这两张表进行查询；而在 HBase 中，对于 service order 这张表如果查询 customer 就没必要做 join 了，之前通过外键索引到 customer 信息，在这里已经保存在 service order 里了。这虽然会带来额外的存储，但在 nosql 中这是很正常的操作方式。<br>此外，这个 rowkey 的设计既能找到对应的 product 和 customer，并且把所有 A 开头的商品保存在了一起，如果查询经常是某一类商品一起查询的话，那这种设计方式就很合理。</p>
<h2 id="转换例子"><a href="# 转换例子" class="headerlink" title="转换例子"></a>转换例子 </h2><p> 一般来说 HBase schema 的设计主要考虑这三点，再看两个根据这三条原则对应到数据转换例子。</p>
<h3 id="一对多"><a href="# 一对多" class="headerlink" title="一对多"></a>一对多</h3><p><img src="/images/rdbms-2.png" alt=""><br><img src="/images/hbase-2.png"alt=""></p>
<h3 id="多对多"><a href="# 多对多" class="headerlink" title="多对多"></a>多对多</h3><p><img src="/images/rdbms-3.png" alt=""><br><img src="/images/hbase-3.png"alt=""></p>
<p>第二个多对多的例子就是把两个一对多结合起来，没有借助一张中间表，这是因为 HBase 的 CF 是可以随意添加 column 的，很灵活，所以刚好可以这么做。</p>
<h1 id="关于看的两篇论文"><a href="# 关于看的两篇论文" class="headerlink" title="关于看的两篇论文"></a>关于看的两篇论文 </h1><p> 我感觉这两篇论文侧重于两个方向，这在最后的问题中会说明，然后基本也是 guide。<br>论文 MySQL to NoSQL Data Modeling Challenges in Supporting Scalability 主要写了如何迁移 tweet（重点在第 6 段），主要也是 schema 变化的描述，基本思想就是上面三点。<br>另一篇 ONDM: an Object-NoSQL Datastore Mapper 介绍了一个 ORM 映射框架 ORM，现在 ORM 框架已经很多了，这个和现在的也差不多，下面介绍一下 ORM。</p>
<h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><p>ORM(Object Relational Mapping)通常是指对象和关系型数据的映射，对应在 nosql 中也叫 ODM(D:data)，OGM(G:grid）。这个东西可以让程序员不用关心数据库的设计，而只用关系对象之间的关系。我主要是了解了一些针对 nosql 的 ORM 框架，比如 hibernate ogm，kundera，datanucleus。</p>
<p>从上层来看他们大都是一样的，都是把对象（java 中的 class）通过注解的方式映射到 nosql 中，最简单的数据模型包括实体、属性和关系。比如这样：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@PersistenceCapable</span> </div><div class="line"><span class="variable">@Extensions</span>(&#123;</div><div class="line">    <span class="variable">@Extension</span>(vendorName = <span class="string">"datanucleus"</span>, key = <span class="string">"hbase.columnFamily.meta.bloomFilter"</span>, value = <span class="string">"ROWKEY"</span>), </div><div class="line">    <span class="variable">@Extension</span>(vendorName = <span class="string">"datanucleus"</span>, key = <span class="string">"hbase.columnFamily.meta.inMemory"</span>, value = <span class="string">"true"</span>) </div><div class="line">&#125;) </div><div class="line">public class MyClass</div><div class="line">&#123;</div><div class="line">    <span class="variable">@PrimaryKey</span> </div><div class="line">    private long id; </div><div class="line">    </div><div class="line">    <span class="comment">// column family data, name of attribute blob </span></div><div class="line">    <span class="variable">@Column</span>(name = <span class="string">"data:blob"</span>) </div><div class="line">    private String blob; </div><div class="line"></div><div class="line">    <span class="comment">// column family meta, name of attribute firstName </span></div><div class="line">    <span class="variable">@Column</span>(name = <span class="string">"meta:firstName"</span>) </div><div class="line">    private String firstName;</div><div class="line"></div><div class="line">    <span class="comment">// column family meta, name of attribute firstName </span></div><div class="line">    <span class="variable">@Column</span>(name = <span class="string">"meta:lastName"</span>) </div><div class="line">    private String lastName;</div><div class="line">   	</div><div class="line">   	<span class="selector-attr">[... getter and setter ...]</span></div></pre></td></tr></table></figure></p>
<p>这些 @符号就把该类中的属性映射到 HBase 中了，至于数据库连接和 class 与 CF 的映射通常是通过 xml 文件来描述。</p>
<h1 id="思考"><a href="# 思考" class="headerlink" title="思考"></a>思考 </h1><p>1、根据先有对象的逻辑，再设计 HBase，其实考虑的就是业务需求，把哪些字段放在一起，rowkey 怎么设计，哪些需要 join 合并起来等等。<br>2、迁移数据的话肯定是设计好 schema 然后抽数据(不会通过两次 ORM 来迁移)，ORM 只是说在开发过程中层次分离，偏向于数据库开发，而不是数据库迁移。<br> 所以感觉这两个不是同一个东西 = =||</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期在做从oracle到HBase的数据库迁移，接触到了ORM以及如何设计HBase的schema，下面把这几天的学习成果记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="east" scheme="http://nap-blog.artemisprojects.org/categories/east/"/>
    
    
      <category term="ORM" scheme="http://nap-blog.artemisprojects.org/tags/ORM/"/>
    
      <category term="nosql" scheme="http://nap-blog.artemisprojects.org/tags/nosql/"/>
    
      <category term="schema" scheme="http://nap-blog.artemisprojects.org/tags/schema/"/>
    
  </entry>
  
  <entry>
    <title>跨主机的 docker 容器编排 nap-compose （二）</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-nap-compose-2/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-nap-compose-2/</id>
    <published>2015-11-07T06:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.908Z</updated>
    
    <content type="html"><![CDATA[<p>简化的跨主机的多容器应用编排和部署工具的实现。</p>
<a id="more"></a>
<hr>
<p>我们已经在 <a href="http://nap-group.herokuapp.com/2015-11/nap-compose-1/" target="_blank" rel="external"> 前一篇文章 </a> 介绍了背景和思路，现在该写代码了。<br>我们准备用 python 3 来实现。先了解一下 docker api 和 python ssh 的库作为准备工作。主要部分在于梳理 docker-compose 的源码，然后在其基础上修改 docker client 相关的函数，改成我们的实现，从而重用 compose 已经实现的解析<code>docker-compose.yml</code>，生成容器间连接关系和获取容器域名的功能。</p>
<h2 id="Docker-Remote-API"><a href="#Docker-Remote-API" class="headerlink" title="Docker Remote API"></a><a href="http://docs.docker.com/engine/reference/api/docker_remote_api_v1.21/" target="_blank" rel="external">Docker Remote API</a></h2><h3 id="概述"><a href="# 概述" class="headerlink" title="概述"></a>概述 </h3><p> 之前我们是通过定义 fleet 的 service unit 来管理多个主机上的 docker daemon 的。在 service unit 中可以直接写 docker 命令，fleet 会把 service 分派给各主机的 systemd 来执行。<br>现在我们要通过 docker 提供的 restful api 来编程直接与 docker daemon 交互。restful api 返回的是 json 格式的数据。有很多官方或非官方的 repo 把 restful api 包装成各种 <a href="http://docs.docker.com/engine/reference/api/remote_api_client_libraries/" target="_blank" rel="external"> 主流编程语言的 docker client 库</a>，这样我们就不用自己写解析 json 的那部分代码了。</p>
<h3 id="开启 api 访问的 tcp 端口"><a href="# 开启 api 访问的 tcp 端口" class="headerlink" title="开启 api 访问的 tcp 端口"></a>开启 api 访问的 tcp 端口 </h3><p> 要远程访问 docker api，首先要开启 tcp 端口。<br>对 ubuntu 14.04 系统，在 <code>/etc/default/docker</code> 中增加一行：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">DOCKER_OPTS</span>=<span class="string">"-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock"</span></div></pre></td></tr></table></figure></p>
<p>CoreOS 和 RHEL/CentOS 使用 systemd 来管理系统服务，Ubuntu 15.04 及以后的版本也改为 systemd，设置方法有所不同，具体可以参考 <a href="https://coreos.com/os/docs/latest/customizing-docker.html" target="_blank" rel="external">CoreOS 的文档</a> 和<a href="http://www.dockone.io/question/616" target="_blank" rel="external">dockone 上的相关问题</a></p>
<p>设置后重新启动 docker daemon，即可从通过 2375 访问 docker api。另外后面的 <code>unix:///var/run/docker.sock</code> 是给本机的 docker client 命令行使用的。我们实验的主机（VM）是 ubuntu 15.10，IP 是<code>10.1.1.5</code>，安装了 docker 1.9.0，测试一下 api：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">http:</span><span class="comment">//10.1.1.5:2375/version</span></div></pre></td></tr></table></figure></p>
<p>也可以用 chrome 访问这个地址。推荐安装 json formatter 这个 chrome 插件，它可以格式化显示 json 数据。</p>
<p>返回的结果如图：<br><img src="/images/remote-api.png" height="240" alt=""></p>
<blockquote>
<p>直接暴露 tcp 端口是有安全问题的。docker api 支持登录验证，不过这里为了简便没有使用。</p>
</blockquote>
<h3 id="docker-py 简单示例"><a href="#docker-py 简单示例" class="headerlink" title="docker-py 简单示例"></a>docker-py 简单示例 </h3><p> 我们使用的 <a href="https://github.com/docker/docker-py" target="_blank" rel="external">docker-py</a> 是 docker 官方实现的。在开发机器上通过 pip 安装这个库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install python3-pip  <span class="comment"># 对 ubuntu; windows 在安装 python 时会同时安装 pip</span></div><div class="line">pip3 install docker-py</div></pre></td></tr></table></figure></p>
<p>下面是启动容器、获取运行容器列表和容器 ip 的示例代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> docker</div><div class="line"></div><div class="line">client = docker.Client(base_url= <span class="string">'http://10.1.1.5:2375'</span>)</div><div class="line"></div><div class="line">container = client.create_container(image=<span class="string">'ubuntu:latest'</span>,command=<span class="string">'echo hello'</span>)</div><div class="line"></div><div class="line">print(container[<span class="string">'Id'</span>])</div><div class="line">client.start(container)</div><div class="line"></div><div class="line">containers = client.containers()           <span class="comment"># /containers/json</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> containers:</div><div class="line">    info = client.inspect_container(item)  <span class="comment"># /containers/&#123;id&#125;/json</span></div><div class="line">    print(<span class="string">"[&#123;0&#125;] &#123;1&#125; &#123;2&#125;"</span>.format(item[<span class="string">'Id'</span>][<span class="number">0</span>:<span class="number">9</span>],</div><div class="line">                                 info[<span class="string">'NetworkSettings'</span>][<span class="string">'IPAddress'</span>],</div><div class="line">                                 info[<span class="string">'Name'</span>]))</div><div class="line">    <span class="comment"># print(info['HostsPath'])</span></div></pre></td></tr></table></figure></p>
<p>运行的结果示例如下：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">C:\<span class="title">Python3</span>\<span class="title">python.exe</span> <span class="title">D</span>:/<span class="title">Code</span>/<span class="title">Py</span>/<span class="title">main.py</span></span></div><div class="line">[<span class="title">f4c28710d</span>] 172.17.0.4 /<span class="title">shipyard</span>-<span class="title">controller</span></div><div class="line">[7<span class="title">edce4fce</span>] 172.17.0.6 /<span class="title">shipyard</span>-<span class="title">swarm</span>-<span class="title">agent</span></div><div class="line">[3<span class="title">c71749ce</span>] 172.17.0.7 /<span class="title">shipyard</span>-<span class="title">swarm</span>-<span class="title">manager</span></div><div class="line">[<span class="title">ea3527753</span>] 172.17.0.5 /<span class="title">shipyard</span>-<span class="title">proxy</span></div><div class="line">[3<span class="title">e44ea102</span>] 172.17.0.2 /<span class="title">shipyard</span>-<span class="title">certs</span></div><div class="line">[184391<span class="title">e5d</span>] 172.17.0.3 /<span class="title">shipyard</span>-<span class="title">discovery</span></div><div class="line">[<span class="title">b9d60b44e</span>] 172.17.0.8 /<span class="title">shipyard</span>-<span class="title">rethinkdb</span></div><div class="line"></div><div class="line"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</div></pre></td></tr></table></figure></p>
<p>这个库的函数与 docker remote api 文档有很直接的对应关系。函数的返回值也是与文档对应的 json 对象，可以通过字典的方式非常方便的获取相关字段的值。</p>
<h2 id="python-ssh"><a href="#python-ssh" class="headerlink" title="python ssh"></a>python ssh</h2><p>通过 ssh 操作远程主机是不太规范的做法。原则上说，我们也可以不必使用 remote api，而是直接 ssh 到各主机，然后执行 docker 命令，甚至做任何系统操作。不过我们不想集齐 docker 三件套，用 docker engine 来修改 hosts，而又没有相关的 api，所以只能用 ssh 了。</p>
<p>这里我们参考《Python 自动化运维》，使用 <a href="https://github.com/paramiko/paramiko" target="_blank" rel="external">paramiko</a> 这个库。安装过程费了点周折。</p>
<p>先说 Windows 上的安装，直接用 <code>pip install paramiko</code> 是装不上的，会卡在依赖项 <code>pycrypto</code> 上。安装 <code>pycrypto</code> 过程中需要 MSVC 来编译，不过我没有安装 MSVC，Google 到的一个预编译的二进制文件不支持 python 3.5，好在找到另一个预编译的，安装方法如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install --use-wheel --<span class="keyword">no</span>-<span class="built_in">index</span> --<span class="keyword">find</span>-links=http<span class="variable">s:</span>//github.<span class="keyword">com</span>/sfbahr/PyCrypto-Wheels/raw/master/pycrypto-<span class="number">2.6</span>.<span class="number">1</span>-cp35-none-win_amd64.whl pycrypto</div><div class="line">pip install paramiko</div></pre></td></tr></table></figure></p>
<p>在 Ubuntu 上还要麻烦些。在 Ubuntu 15.10 上，默认有 python 2.7 和 python 3.4，在安装 <code>python3-pip</code> 时，会自动安装 gcc，g++ 等开发工具，还有 python3.5，不过没有安装 python3.5-dev，导致无法编译<code>pycrypto</code>。</p>
<blockquote>
<p>PS, pip3 默认使用 python3.5，而不是系统自带的 python3.4，所以最好把 <code>/usr/bin/python3</code> 这个符号链接从 python3.4 改成 python3.5。<br>按照下面的步骤安装：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> python3.<span class="number">5</span>-dev</div><div class="line">pip3 <span class="keyword">install</span> pycrypto</div><div class="line">pip3 <span class="keyword">install</span> paramiko</div></pre></td></tr></table></figure></p>
</blockquote>
<p>下面是 Windows 上的一个示例<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import paramiko</div><div class="line">import os</div><div class="line"></div><div class="line">hostname=<span class="string">'10.1.1.5'</span></div><div class="line">username=<span class="string">'root'</span></div><div class="line">paramiko<span class="selector-class">.util</span><span class="selector-class">.log_to_file</span>(<span class="string">'D:\ssh.log'</span>)</div><div class="line"></div><div class="line">ssh = paramiko.SSHClient()</div><div class="line">ssh.load_system_host_keys()</div><div class="line"></div><div class="line">key=paramiko<span class="selector-class">.RSAKey</span><span class="selector-class">.from_private_key_file</span>(os<span class="selector-class">.path</span><span class="selector-class">.expanduser</span>(<span class="string">'D:\VM\ssh\id_rsa'</span>))</div><div class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</div><div class="line"></div><div class="line">ssh.connect(hostname=hostname, username=username, pkey=key)</div><div class="line"></div><div class="line">stdin,stdout,stderr=ssh.exec_command(<span class="string">'uname -a'</span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(stdout.read()</span></span>)</div><div class="line"></div><div class="line">ssh.close()</div></pre></td></tr></table></figure></p>
<p>这个例子是通过 ssh key 登录到 VM 上，然后执行 <code>uname -a</code> 命令。返回的结果如下：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b<span class="symbol">'Linux</span> x <span class="number">4.2</span>.<span class="number">0</span>-<span class="number">16</span>-<span class="keyword">generic</span> #<span class="number">19</span>-Ubuntu SMP Thu Oct <span class="number">8</span> <span class="number">15</span>:<span class="number">35</span>:<span class="number">06</span> UTC <span class="number">2015</span> x86_64 x86_64 x86_64 GNU/Linux\n'</div></pre></td></tr></table></figure></p>
<h2 id="梳理 docker-compose 的源码"><a href="# 梳理 docker-compose 的源码" class="headerlink" title="梳理 docker-compose 的源码"></a>梳理 docker-compose 的源码 </h2><p>OK，准备工作基本就绪。下面梳理一下<code>docker-compose up</code> 命令来创建、启动和连接多个容器涉及的代码，主要是参考 <a href="https://github.com/docker/compose" target="_blank" rel="external">github 上的源码</a> 和《Docker 容器与容器云》的 6.1.2，下面的图参考了这本书的图 6.1。<br><img src="/images/compose.png" alt=""></p>
<ul>
<li>project 对象从 compose.yml 获取 service 列表，并根据 link 计算出各 service 的依赖关系，以此为顺序来创建各 service。</li>
<li>docker-compose 是针对单个 docker engine 的，project 对象只关联了一个 docker-client 对象，首先我们要把它改成一个列表；</li>
<li>service 对象也是只关联了一个 docker-client 对象，它是从 project 传递过来的，最终传给 container 对象来创建和启动容器；</li>
<li>从 client 列表中指派一个 client 给 container 对象，就是所谓的调度了。因为一个 service 会对应多个 container，这些 container 应该可以跨 Host，所以调度应该发生在 service→container 这个阶段；</li>
<li>我们需要记录下来哪个 docker-client 创建了哪个 service 下面的 container，容器的 id，以及容器启动后的 ip 地址，这样我们再 ssh 到那个 Host 上去，修改对应容器 id 目录下的 hosts 文件；</li>
<li>上面的操作可能会造成若干秒的延迟后才能正常地通过 hostname 来进行通信，为此，在容器的启动命令之前插入一个 sleep 命令，防止因为连接超时导致应用启动失败。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简化的跨主机的多容器应用编排和部署工具的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/categories/nap/"/>
    
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/tags/nap/"/>
    
      <category term="docker" scheme="http://nap-blog.artemisprojects.org/tags/docker/"/>
    
      <category term="compose" scheme="http://nap-blog.artemisprojects.org/tags/compose/"/>
    
  </entry>
  
  <entry>
    <title>跨主机的 docker 容器编排 nap-compose （一）</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-nap-compose-1/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-nap-compose-1/</id>
    <published>2015-11-07T03:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.908Z</updated>
    
    <content type="html"><![CDATA[<p>docker 三件套（compose + swarm + engine）可以实现跨主机的多容器应用编排和部署。我们要实现一个功能类似的，简化一些的工具，这里介绍一下实现的思路。</p>
<a id="more"></a>
<hr>
<h2 id="容器编排和 docker-compose"><a href="# 容器编排和 docker-compose" class="headerlink" title="容器编排和 docker-compose"></a>容器编排和 docker-compose</h2><h3 id="概述"><a href="# 概述" class="headerlink" title="概述"></a>概述 </h3><p> 要想在 <strong> 单个 </strong> 主机上部署多个容器相关联的应用，</p>
<ul>
<li>一种方法是依次执行 docker 命令，依次启动各容器。要特别注意容器的启动顺序：如果容器 B 依赖 A，但容器 B 比 A 先启动，B 会可能因为无法访问 A 而异常停止。</li>
<li>另一种是方法使用 <a href="https://docs.docker.com/compose/" target="_blank" rel="external">docker-compose</a> 工具，它的前身是 fig。compose 是 python 实现的，被打包成可执行文件发布。</li>
</ul>
<p>docker-compose 是简化多容器应用编排（orchestration）和部署的工具，它允许开发者把一个应用中多个容器及它们之间的依赖关系都写到一个 <code>docker-compose.yml</code> 配置文件中，将其解析后自动按顺序执行 docker（通过 docker API），启动整个应用。</p>
<h3 id="guestbook 示例"><a href="#guestbook 示例" class="headerlink" title="guestbook 示例"></a>guestbook 示例 </h3><p> 下面是一个 <code>docker-compose.yml</code> 的 <a href="http://yingz.info/2015-10/compose-guestbook/" target="_blank" rel="external"> 例子 </a>，来自<a href="http://k8s.io/" target="_blank" rel="external">kubernetes(k8s)</a> 中的<a href="https://github.com/kubernetes/kubernetes/tree/master/examples/guestbook" target="_blank" rel="external">guestbook 示例</a>。它是一个简单的 web 留言板，共有 3 个组件，分别是</p>
<ul>
<li>php 前端，运行在 apache 服务器；</li>
<li>redis master，作为写入数据库；</li>
<li>redis-slave，作为读取数据库。</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">web</span>:  </div><div class="line">  <span class="attribute">image</span>: guestbook</div><div class="line">  <span class="attribute">ports</span>:</div><div class="line">  - <span class="number">80</span>:<span class="number">80</span></div><div class="line">  <span class="attribute">links</span>:</div><div class="line">  - <span class="attribute">redis-master</span>:redis-master</div><div class="line">  - <span class="attribute">redis-slave</span>:redis-slave</div><div class="line"></div><div class="line"><span class="attribute">redis-master</span>:  </div><div class="line">  <span class="attribute">image</span>: redis</div><div class="line">  <span class="attribute">ports</span>:</div><div class="line">  - <span class="number">6379</span></div><div class="line"></div><div class="line"><span class="attribute">redis-slave</span>:  </div><div class="line">  <span class="attribute">image</span>: redis-slave</div><div class="line">  <span class="attribute">ports</span>:</div><div class="line">  - <span class="number">6379</span></div><div class="line">  <span class="attribute">links</span>:</div><div class="line">  - <span class="attribute">redis-master</span>:redis-master</div></pre></td></tr></table></figure>
<h3 id="service- 和 -links"><a href="#service- 和 -links" class="headerlink" title="service 和 links"></a>service 和 links</h3><p>compose 中有下面 2 个概念</p>
<ul>
<li>project：一个 <code>docker-compose.yml</code> 描述的就是一个 project，也就是开发者的一个应用；一个 project 由若干 service 组成。</li>
<li>service：是 yml 中的顶层节点，上面的例子里是 web， redis-master，redis-slave 。看起来每个 service 的子节点都是通过 <code>docker run</code> 运行一个容器的参数，不过 service 是比容器高一层的抽象，一个 service 对应于多个容器（container）。比如运行 <code>docker-compose scale web=3</code> 命令可以横向扩展 web 这个 service，让它有 3 个容器。<blockquote>
<p>service 这样简单地横向扩展在实际中显然是不够的，如果是 web 应用，应该有一个负载均衡节点作为入口。此外，横向扩展的容器的 hostname 应该有一个约定格式，这样才能与它们通信。</p>
</blockquote>
</li>
</ul>
<p>compose 除了在一个 yml 文件里描述多容器以外，还要把它们连接起来，这是通过 yml 中的 <code>links</code> 来描述的。compose 能够让各容器之间通过域名来互相访问。</p>
<p>使用默认的 docker0 网桥时，开发者只能在 docker 启动之后才能获取容器的 ip，而且这个 ip 不是固定的，在容器重启后可能会变化，这给跨容器的通信造成了不便。在考虑横向扩展和失败转移时，会动态增减容器，它们的 ip 也是不能事先知道的。<br>另外，硬编码 ip 地址不是好的做法，最好是通过域名来屏蔽 ip 的变化。</p>
<p>我们不需要配置 DNS 来实现域名解析，docker 的 <code>link</code> 参数可以实现在单主机上容器间的静态域名解析。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run <span class="comment">--link= 容器 A:A 的别名 镜像 B</span></div></pre></td></tr></table></figure></p>
<p>这个命令 <strong> 将要 </strong> 运行的容器 B 与一个 <strong> 已经 </strong> 运行的容器 A（通过 <code>--name</code> 来指定容器名）连接起来：修改容器 B 的环境变量及 <code>/etc/hosts</code>，在<code>hosts</code> 中添加类似下面项。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">A</span>的 IP&gt; <span class="keyword">A</span>的别名</div></pre></td></tr></table></figure></p>
<p>这样容器 B 中就可以通过 <code>A 的别名</code> 这个域名来访问容器 A 了。<br>必须要求容器 B 先于容器 A 启动，这样 docker 才能知道容器 A 的 IP。</p>
<p>此外，关于 volumns 的内容以后再写文章讨论。</p>
<h2 id="跨主机编排"><a href="# 跨主机编排" class="headerlink" title="跨主机编排"></a>跨主机编排 </h2><h3 id="docker 三件套"><a href="#docker 三件套" class="headerlink" title="docker 三件套"></a>docker 三件套</h3><p> 如果要将有多个容器的应用部署到多个主机上，直接使用 docker-compose 就困难了。</p>
<p>一种解决方案是使用 docker 三件套：compose，<a href="https://docs.docker.com/swarm/" target="_blank" rel="external">swarm</a>和 docker engine（也就是 docker daemon），此外还需要新增的<a href="http://docs.docker.com/engine/userguide/networking/" target="_blank" rel="external">networking</a>。</p>
<p>swarm 是集群管理工具，目标是把多个主机上的 docker 服务整合为集群，提供 <strong> 单一 </strong> 的入口。主要解决 2 个问题：</p>
<ul>
<li>组成集群：之前我们的实验都是基于 CoreOS 的 fleet 来管理集群的。<a href="https://coreos.com/using-coreos/clustering/" target="_blank" rel="external">fleet</a>使用 <a href="https://coreos.com/etcd/" target="_blank" rel="external">etcd</a> 作为集群信息的存储，<a href="https://zh.wikipedia.org/wiki/Systemd" target="_blank" rel="external">systemd</a>作为主机上的执行代理。swarm 与 fleet 比较相似。swarm 在主机上的执行代理自然是 docker engine（也就是 docker daemon，通过 docker API），集群信息存储除了使用 etcd，还支持 zookeeper 和 consul。</li>
<li>分发调度：既然 swarm 把多个主机上的 docker 抽象为单一的入口，那就要解决任务如何分配到各个主机上的问题，也就是所谓的调度问题。目前 swarm 支持的有随机和 binpack（装箱，根据 CPU 和内存）调度。调度是集群管理都需要解决的问题。mesos 是进行调度管理的项目，swarm 也有与<strong>mesos 的整合</strong>。</li>
</ul>
<p>networking 是解决跨主机容器联网问题的库，与 flannel 类似，也是采用的覆盖（overlay）网络，docker 1.9 版增加了 <code>docker network</code> 命令，用来管理跨主机的网络。</p>
<p>另外，docker machine 是在虚拟机，IaaS 云平台上从零开始部署 docker 的，有点像 chef，puppet 这类自动化工具或 vagrant 这种虚拟机开发环境构建工具。它还可以 ssh 到各主机执行命令。不过如果已经安装好了 docker，machine 就不太必要了。</p>
<h3 id="跨主机的覆盖网络"><a href="# 跨主机的覆盖网络" class="headerlink" title="跨主机的覆盖网络"></a>跨主机的覆盖网络 </h3><p> 覆盖网络是跨主机的 docker 容器间联网问题的一种解决方案。<br>跨主机的 docker 容器间联网，关键是实现容器间的 <strong> 路由 </strong>，也就是说让各主机都知道每个主机上运行了哪些容器，或者说每个容器都运行在哪个主机上。知道了这些信息，容器间跨主机通信时，容器发出的数据包先发给本主机，然后发给目标容器所在的主机，目标主机再转发给目标容器。<br> 要想获取容器分布信息，</p>
<ul>
<li>一种方案是将其都放到各主机都能访问的集中存储上去，然后各主机上安装代理来同步这些信息，并负责转发数据包；</li>
<li>另一种是主机上安装一个虚拟路由器，通过路由协议来交换信息；或者通过 <code>iptables</code> 来实现类似的功能；</li>
</ul>
<blockquote>
<p>传统的虚拟机支持桥接网络，此桥接非彼 docker 的桥接，docker 的桥接在虚拟机技术中对应的叫 NAT 网络（本来在 docker 中也是 NAT，但不叫 NAT，却被称为桥接。。。）。虚拟机的桥接，是将 VM 的虚拟网卡与物理网卡绑定，基于物理网卡的 <a href="https://zh.wikipedia.org/wiki/%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F" target="_blank" rel="external"> 混杂模式 </a> 或支持虚拟化的网卡的<a href="https://msdn.microsoft.com/en-us/library/windows/hardware/hh440235%28v=vs.85%29.aspx" target="_blank" rel="external">SR-IOV</a>，从外部网络看来，虚拟网卡与物理网卡没有什么区别，从而虚拟机与物理主机在网络上的地位也是对等的，已有的网络管理系统像管理物理主机一样管理虚拟机，也就不存在跨主机的 VM 通信问题了。</p>
<p>docker 也是可以通过 <a href="http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/" target="_blank" rel="external"> 自定义网桥 </a> 来使用虚拟机的桥接网络模式的。</p>
</blockquote>
<p>CoreOS 的 <a href="https://github.com/coreos/flannel" target="_blank" rel="external">flannel</a> 采用的是第一种方案，它使用 etcd 做为集中存储，以 ip in ip 的形式来转发数据包。docker networking 与 flannel 类似。</p>
<h3 id="设置 flannel"><a href="# 设置 flannel" class="headerlink" title="设置 flannel"></a>设置 flannel</h3><p>先获取 <a href="https://github.com/coreos/etcd/releases/download/v2.0.12/etcd-v2.0.12-linux-amd64.tar.gz" target="_blank" rel="external">etcd(v2.0.12)</a> 和<a href="https://github.com/coreos/flannel/releases/download/v0.5.3/flannel-0.5.3-linux-amd64.tar.gz" target="_blank" rel="external">flannel(v0.5.3)</a>的二进制文件，并解压到 <strong> 相关 </strong> 主机的 <code>/usr/bin</code>（或 <code>$PATH</code> 中的其它路径）。</p>
<blockquote>
<p>注意，flannel 安装在需要组成覆盖网络的主机上，etcd 可以单独设置主机，不必在 flannel 主机里。下面的示例 etcd 安装在 ip 为 <code>10.1.1.12</code> 的主机上。<br>可以将 etcd 安装在多台主机上 <a href="https://coreos.com/etcd/docs/latest/clustering.html" target="_blank" rel="external"> 组成集群</a>，以提高可用性。</p>
</blockquote>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 在 10.1.1.12 主机上，启动 etcd，监听本机所有 ip 的 4001 端口</span></div><div class="line">etcd -listen-client-urls http:<span class="comment">//0.0.0.0:4001 -advertise-client-urls http://127.0.0.1:4001  &amp;&gt;/dev/null &amp;</span></div><div class="line"></div><div class="line"><span class="meta"># 设置 flannel 的配置 key（设置一次即可），使用 10.4.0.0/16 网段</span></div><div class="line">etcdctl rm /coreos.com/network --recursive  &amp;&gt;/dev/<span class="built_in">null</span></div><div class="line">etcdctl mk /coreos.com/network/config '&#123;<span class="string">"Network"</span>:<span class="string">"10.4.0.0/16"</span>&#125;'</div><div class="line"></div><div class="line"><span class="meta"># 在任意主机上，检查 etcd 是否可用</span></div><div class="line">curl http:<span class="comment">//10.1.1.12:4001/version</span></div><div class="line"></div><div class="line"><span class="meta"># 在需要组成覆盖网络的主机上，启动 flannel，并设置 docker0 网桥</span></div><div class="line">flanneld -iface=<span class="string">"eth1"</span> -etcd-endpoints=<span class="string">"http://10.1.1.12:4001"</span> &amp;&gt;/dev/<span class="built_in">null</span>  &amp;</div><div class="line"><span class="built_in">sleep</span> <span class="number">1</span></div><div class="line"></div><div class="line">service docker <span class="keyword">stop</span>              <span class="meta"># 对 ubuntu 14.04，停止 docker daemon</span></div><div class="line"></div><div class="line">. <span class="string">"/run/flannel/subnet.env"</span>      <span class="meta"># 获取下面用到的 $&#123;FLANNEL_*&#125; 相关环境变量</span></div><div class="line"></div><div class="line">ifconfig docker0 $&#123;FLANNEL_SUBNET&#125;</div><div class="line">docker daemon --bip=$&#123;FLANNEL_SUBNET&#125; --mtu=$&#123;FLANNEL_MTU&#125;  &amp;  <span class="meta"># 启动 docker daemon</span></div></pre></td></tr></table></figure>
<p>设置完成后，flannel 在主机上添加了一个 flannel0 网桥，它与 docker0 网桥不同：bridge utils 的 <code>brctl show</code> 会显示 docker0 网桥，但不会显示 flannel0 网桥。上面的命令将 docker0 网桥的 ip 设置在 flannel0 的 ip 段内，启动的容器也在这个 ip 段，这样就可以通过 flannel0 来转发跨主机的数据包了。</p>
<h3 id="不同主机容器的 -etc-hosts"><a href="# 不同主机容器的 -etc-hosts" class="headerlink" title="不同主机容器的 /etc/hosts"></a>不同主机容器的 <code>/etc/hosts</code></h3><p>虽然设置了 flannel 覆盖网络，可以让跨主机的容器间通过 IP 地址来通信，但是还不能直接使用域名。<br>我们可以增加一个容器来专门提供 DNS 服务，也可以用类似 <code>docker --link</code> 的做法，分别修改各容器的 hosts。docker 三件套再加上 networking 可以实现这样的功能，不过我们希望能自己实现一下这样的功能。</p>
<blockquote>
<p>注意，由于 compose 只能与一个 docker daemon 交互，不能与多个主机上的 docker daemon 交互，无法实现跨主机的容器间由域名通信。</p>
</blockquote>
<p>我们先不考虑解析 <code>compose.yml</code>，生成容器间连接关系和如何获取容器域名。假设已经知道了要启动哪些容器及这些容器应该是什么域名，容器可以运行在不同的主机上，这些主机间已经有 flannel 的覆盖网络允许容器间的通信。启动容器后我们可以得到各主机上运行的容器 id 和 ip，然后要把域名和 ip 这一对信息分别写道所有相关容器内的<code>/etc/hosts</code> 文件里，这样容器间就可以使用域名通信了。</p>
<p>用 docker API 编程地访问多个主机的 docker daemon，可以创建、启动容器，获取容器的信息，包括 ip 地址和 hosts 在对应主机的路径 <code>/var/lib/docker/containers/{容器 id}/hosts</code>，将域名信息用 ssh 写入到各主机的相应<code>hosts</code> 文件即可。</p>
<blockquote>
<p>docker 三件套是最终通过 engine 来写入 <code>hosts</code> 的，但并没有提供该功能的 API。</p>
</blockquote>
<p>我们在下一篇介绍具体的做法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker三件套（compose + swarm + engine）可以实现跨主机的多容器应用编排和部署。我们要实现一个功能类似的，简化一些的工具，这里介绍一下实现的思路。&lt;/p&gt;
    
    </summary>
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/categories/nap/"/>
    
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/tags/nap/"/>
    
      <category term="docker" scheme="http://nap-blog.artemisprojects.org/tags/docker/"/>
    
      <category term="compose" scheme="http://nap-blog.artemisprojects.org/tags/compose/"/>
    
  </entry>
  
  <entry>
    <title>Mesos Framework 解析</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-mesos/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-mesos/</id>
    <published>2015-11-07T02:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.907Z</updated>
    
    <content type="html"><![CDATA[<p>Mesos 是 Apache 旗下的开源集群资源计算框架，它能将多台机器（包括物理机和虚拟机）的资源，包括 CPU，内存，硬盘等计算资源抽象出来，进行资源隔离和共享，构建高容错性、高可用性的分布式资源管理系统。</p>
<a id="more"></a>
<hr>
<h2 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a>介绍 </h2><h3 id="Mesos-Framework"><a href="#Mesos-Framework" class="headerlink" title="Mesos Framework"></a>Mesos Framework</h3><p>Mesos 采用两层架构，所有计算框架均在底层，即 Mesos Master 负责对任务的资源分配给各个框架；在计算框架之上为 Mesos Framework，它可用是通用的框架，也可用为特定软件编写的框架，如 Framework 一个长时间运行的服务（比如 JobTracker 等），也可以是一个短生命周期的 Job 或者 Application。这样设计的好处是，<strong> 作为底层的 Mesos 不需要知道顶层的应用的细节，只负责根据 slave 资源状况提供 offers，而调度由顶层的 Framework 进行实现</strong>，这样底层的 Mesos 对所有应用（分布式 or 集中式，长时间服务 or 短暂性任务等）均可适用。</p>
<p>Framework 可以根据是否符合任务对资源的约束，选择接受或拒绝资源邀约。一旦资源邀约被接受，Framework 将与 Master 协作调度任务，并在数据中心的相应 Slave 节点上运行任务。</p>
<p>Framework 包含两大部分：</p>
<ul>
<li><strong>Scheduler</strong><br>  Scheduler 负责管理框架所获得的资源，按照作业的输入量，将其分解成若干任务，并未这些任务申请资源，监控这些任务的运行状态，一旦发现某个任务运行失败则重新为其申请资源。</li>
<li><strong>Executor</strong><br>  Executor 负责执行调度器所分配的任务。</li>
</ul>
<p>Framework 结构如图：<br><img src="/images/mesos-arch.jpg" alt="Framework Structure"><br><!-- http://cdn1.infoqstatic.com/statics_s2_20151020-0055-2/resource/articles/analyse-mesos-part-04/zh/resources/0604001.jpg --></p>
<h2 id="分析"><a href="# 分析" class="headerlink" title="分析"></a>分析</h2><h3 id="Framework 任务分配过程"><a href="#Framework 任务分配过程" class="headerlink" title="Framework 任务分配过程"></a>Framework 任务分配过程</h3><p>Framework 任务分配流程图如下：<br><img src="http://s2.51cto.com/wyfs02/M01/09/F3/wKiom1LKbc-DCmXcAACKJCK6gs4287.jpg" alt="Framework Task"></p>
<p>Mesos 的资源分配行为发生在：<strong>新框架注册 </strong>，<strong> 框架注销 </strong>，<strong> 增加节点 </strong>，<strong> 出现空闲资源 </strong> 等情况，对 Mesos Framework 进行资源分配的流程如下：</p>
<ol>
<li>Mesos Master 中的 <code>Allocator</code> 模块将要为某个 Framework 分配资源，则将资源封装到 <code>ResourceOffersMessage</code> 中，通过网络传输发送给<code>SchedulerProcess</code>；</li>
<li><code>SchedulerProcess</code>调用用户在 Scheduler 中编写的 <code>resourceOffers</code> 函数，告知有新资源可用；</li>
<li>Framework 的 Scheduler 调用 <code>MesosSchedulerDriver</code> 中的 <code>launchTasks()</code> 函数，告知将要启动的任务；</li>
<li>Mesos Master 将待启动的任务分装成 <code>RunTaskMessage</code> 发送给各个 Mesos Slave；</li>
<li>Mesos Slave 收到 <code>RunTaskMessage</code> 消息后，将其发送给对应的<code>ExecutorProcess</code>；</li>
<li><code>ExecutorProcess</code>收到消息后，进行资源本地化，并准备任务环境，最终调度用户编写的 Exector 中的 <code>launchTask</code> 任务启动任务。</li>
</ol>
<h3 id="Framework 开放接口及作用"><a href="#Framework 开放接口及作用" class="headerlink" title="Framework 开放接口及作用"></a>Framework 开放接口及作用 </h3><p>Mesos 向开发者开放了 API，API 隐藏了 Mesos 底层和分布式交互的具体的细节，使得开发者可方便地用根据相应使用环境编写对应的 Framework，提供的接口支持<code>C++</code>，<code>Go</code>，<code>Haskell</code>，<code>Java</code>，<code>Python</code>，和<code>Scala</code> 语言。</p>
<p><strong>Scheduler API</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>registered()</code></td>
<td>当 Scheduler 成功向 Master 注册时被调用</td>
</tr>
<tr>
<td><code>reregistered()</code></td>
<td>当 Scheduler 再次注册成功时被调用</td>
</tr>
<tr>
<td><code>disconnected()</code></td>
<td>当 Scheduler 和 Master 失去连接时被调用</td>
</tr>
<tr>
<td><strong><code>resourcesOffers()</code></strong></td>
<td>当 Framework 收到 Mesos 提供的资源时被调用</td>
</tr>
<tr>
<td><code>offerRescinded()</code></td>
<td>当某个 offer 不再适用时调用(Slave 丢失或者其他 Framework 正在适用这个 offer),master 撤销发送给 Framework 的资源</td>
</tr>
<tr>
<td><code>statusUpdate()</code></td>
<td>当 Mesos 向框架发送消息时被调用</td>
</tr>
<tr>
<td><code>frameworkMessage()</code></td>
<td>用来向 Scheduler 传递 Executor 发送的消息</td>
</tr>
<tr>
<td><code>slaveLost()</code></td>
<td>通知 Mesos 无法和指定 ID 的 slave 通信</td>
</tr>
<tr>
<td><code>executorLost()</code></td>
<td>通知 Scheduler 指定的 Executor 已经以某个状态结束了</td>
</tr>
<tr>
<td><code>error()</code></td>
<td>当 Scheduler 出现可恢复的错误时被调用</td>
</tr>
</tbody>
</table>
<p>其中最重要的为 <br><code>resourceOffers(SchedulerDriver,  List&lt;Offer&gt;)</code> 方法。Master 向 Framework 提供资源 offer，每一份资源 offer 包含从某个 slave 上获取的资源列表（包括 CPU，内存，硬盘等）。开发者重写该方法，可用根据特定的情况接受资源 offer，并利用 offersId 交给 Executor 启动任务，或者拒绝该 offer。<strong>一个 offer 会提供给多个 Framework，但是第一个使用 offer 启动任务的 Framework 会获胜，其他的 Framework 将受到 <code>offerRescinded()</code> 发出的消息。</strong></p>
<p><strong>Scheduler API</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>registered()</code></td>
<td>当 Executor 驱动成功和 Mesos 连接上时调用</td>
</tr>
<tr>
<td><code>reregistered()</code></td>
<td>当 Executor 再次向某个重启的 slave 注册时调用</td>
</tr>
<tr>
<td><code>disconnected()</code></td>
<td>当 Executor 和 slave 失去连接时调用</td>
</tr>
<tr>
<td><strong><code>launchTask()</code></strong></td>
<td>当 Executor 启动某个任务时调用</td>
</tr>
<tr>
<td><code>killTask()</code></td>
<td>当 Executor 杀死某个 task 时被调用</td>
</tr>
<tr>
<td><code>frameworkMessage()</code></td>
<td>当 Framework 的信息到达 Executor 时被调用</td>
</tr>
<tr>
<td><code>shutdown()</code></td>
<td>当 Executor 需要终止所有 task 时被调用</td>
</tr>
<tr>
<td><code>error()</code></td>
<td>当 Scheduler 出现不可恢复的错误时被调用</td>
</tr>
</tbody>
</table>
<p>同样，Executor 中最核心的方法是 <code>launchTask(ExecutorDriver, TaskInfo)</code>。可重写该方法实现执行任务，任务将在 offer 来源的 slave 上执行。<strong> 执行任务在方法调用时会被阻塞，在回调完成前，该 Executor 无法执行其他的任务。</strong> 因此如果要执行一个长时间的任务（如 Web 应用)，可用把任务放在线程里，通过线程的方式启动。</p>
<h2 id="Framework 实例分析"><a href="#Framework 实例分析" class="headerlink" title="Framework 实例分析"></a>Framework 实例分析</h2><p>Mesos 上已有许多 Framework，包括支持 MPI，Hadoop，Spark，Storm 等应用的。这里主要利用简单的 Framework 分析如何实现一个 Framework。</p>
<ul>
<li><p><a href="https://github.com/mesosphere/mesos-hydra" target="_blank" rel="external">mesos-hydra</a>，MPI Framework，该 Framework 是利用 python 进行的实现。</p>
</li>
<li><p><a href="https://github.com/mesosphere/RENDLER" target="_blank" rel="external">RENDLER</a>, 一个利用 Mesos 框架实现的分布式爬虫</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">挖坑，待看完全部代码后补上源码分析</div></pre></td></tr></table></figure>
<h2 id="Framework 设计模式"><a href="#Framework 设计模式" class="headerlink" title="Framework 设计模式"></a>Framework 设计模式 </h2><p> 从现有的 Mesos Framework 分配调度使用资源的方式中，可用总结出以下几种模式。</p>
<ul>
<li>用于协调资源：设计的 Framework 作为其他 Framework 的资源协调者，作为服务运行，如<code>Mesos-DNS</code>。</li>
<li>基于负载状况：设计的 Framework 根据负载来调节资源使用，如 <code>Marathon</code> 和<code>Aurora</code>，会根据约定自动进行扩容和缩容。</li>
<li>基于预留的框架：这里主要指，某些分布式应用，在设计时已经预留了资源调度的接口，如 <code>Hadoop</code>，<code>Spark</code>，<code>Storm</code>，因此只要实现接口，就可以将应用从原有的调度框架（如 Hadoop 原有框架为<code>YARN</code>) 移植到 Mesos 上来。</li>
</ul>
<hr>
<h2 id="相关资源"><a href="# 相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul>
<li><a href="http://mesos.apache.org/" target="_blank" rel="external">Mesos 项目官网</a></li>
<li><a href="http://www.mesoscn.cn/" target="_blank" rel="external">数人云翻译的 Mesos 文档</a></li>
<li><a href="https://mesosphere.com/" target="_blank" rel="external">Mesosphere</a></li>
<li><a href="https://mesosphere.github.io/marathon/" target="_blank" rel="external">Marathon</a></li>
<li><a href="http://aurora.apache.org/" target="_blank" rel="external">Aurora</a></li>
<li><a href="https://mesos.github.io/chronos/" target="_blank" rel="external">Chronos</a></li>
<li><a href="http://www.infoq.com/cn/minibooks/analyse-mesos" target="_blank" rel="external">InfoQ 的 Mesos 迷你书</a></li>
<li><a href="http://people.csail.mit.edu/matei/papers/2011/nsdi_mesos.pdf" target="_blank" rel="external">NSDI 2011 - Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center </a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mesos是Apache旗下的开源集群资源计算框架，它能将多台机器（包括物理机和虚拟机）的资源，包括CPU，内存，硬盘等计算资源抽象出来，进行资源隔离和共享，构建高容错性、高可用性的分布式资源管理系统。&lt;/p&gt;
    
    </summary>
    
      <category term="nap" scheme="http://nap-blog.artemisprojects.org/categories/nap/"/>
    
    
      <category term="mesos" scheme="http://nap-blog.artemisprojects.org/tags/mesos/"/>
    
  </entry>
  
  <entry>
    <title>Restful API 浅析 之设计原则与案例修正</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-rest-api-design/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-rest-api-design/</id>
    <published>2015-11-04T03:04:16.000Z</published>
    <updated>2016-04-06T03:06:29.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前写 Restful 的服务器端 API，写的不好，痛定思痛，决心好好搞懂 Restful。在这一篇中我们首先搞懂 Rest 的含义，然后以我编写的失败的 api 为例，讲解如何编写出符合 Rest 风格的 API。注意本篇指导原则一节大部分来自阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Restful 浅析"><a href="#Restful 浅析" class="headerlink" title="Restful 浅析"></a>Restful 浅析</h1><p>REST 是”REpresentational State Transfer”，一种翻译是”表现层状态转移”, 首先看看 wiki 百科的介绍:</p>
<blockquote>
<p>REST - 表征状态转移是 Roy Fielding 博士在 2000 年他的博士论文中提出来的一种软件架构风格。 目前在三种主流的 Web 服务实现方案中，因为 REST 模式的 Web 服务与复杂的 SOAP 和 XML-RPC 对比来讲明显的更加简洁，越来越多的 web 服务开始采用 REST 风格设计和实现。例如，Amazon.com 提供接近 REST 风格的 Web 服务进行图书查找；雅虎提供的 Web 服务也是 REST 风格的。 – wiki</p>
</blockquote>
<p>从以上的介绍中我们知道 REST 是一种 web 软件架构风格，不过我还是不知道 REST 是个什么鬼，再查查看，有人这么解释 REST:</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> REST 是一套用来创建 Web Service 的方法。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 的主旨是让事情尽量的简单化。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 使用 HTTP 里的方法：GET， POST， DELETE， PUT。你不需要使用 URL 或请求的内容来指定这个方法。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 使用 URL 来指明你将要操作什么对象。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 使用 HTTP 状态码作为返回值。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 调用产生的 HTTP 请求内容只是用于服务数据——不是用来指明调用方法，目标对象或返回值的。</span></div></pre></td></tr></table></figure>
<p>简单来说，REST 是所有 web 应用都应该遵守的架构设计指导原则，每一个 URL 代表一种资源，客户端通过四个 HTTP 动词，对服务器端资源进行操作，实现”表现层状态转化”。查看以下几篇文章深入地了解 REST：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">理解 RESTful 架构</a> - 阮一峰老师 11 年的文章, 浅显易懂</li>
<li><a href="http://www.infoq.com/cn/articles/understanding-restful-style" target="_blank" rel="external">理解本真的 REST 架构风格</a>  -infoq 上一篇翻译的文章，非常细致地解释了 REST</li>
<li><a href="http://martinfowler.com/articles/richardsonMaturityModel.html" target="_blank" rel="external">Richardson Maturity Model steps toward the glory of REST</a> - Martin fowler 解释 Richardson 的 REST3 层成熟度模型</li>
<li><a href="http://hippoom.github.io/blogs/value-of-hypermedia-from-client-perspective.html" target="_blank" rel="external">从消费者的角度评估 REST 的价值</a> - 以举例的方式解释 Richardson 成熟度模型的第三个级别：Hypermedia，很有意思的一篇文章。</li>
</ul>
<p>也许最快的学习方式是学习业界成熟的 REST api 设计, 可以看看 github 是如何设计的:<a href="https://developer.github.com/v3/" target="_blank" rel="external">github API</a>, 另外也许你想看看提出 REST 的 <a href="http://www.ics.uci.edu/~fielding/pubs/webarch_icse2000.pdf" target="_blank" rel="external"> 那篇论文</a>，TL;DR</p>
<h1 id="设计原则"><a href="# 设计原则" class="headerlink" title="设计原则"></a>设计原则 </h1><p> 本来想写个 REST API 设计指南的，不过阮一峰老师在 14 年已经干了 <a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external"> 这事</a>，这里我们转载该文章的原则，然后重新修改我们的 api。另外一些好的指南:</p>
<ul>
<li><a href="https://bourgeois.me/rest/" target="_blank" rel="external">Some REST best practices</a></li>
<li><a href="http://codeplanet.io/principles-good-restful-api-design/" target="_blank" rel="external">Principles of good RESTful API Design</a></li>
</ul>
<h2 id="指导原则"><a href="# 指导原则" class="headerlink" title="指导原则"></a>指导原则 </h2><h3 id="域名"><a href="# 域名" class="headerlink" title="域名"></a> 域名 </h3><p> 应该尽量将 API 部署在专用域名之下, 如:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span><span class="comment">//api.example.com</span></div></pre></td></tr></table></figure></p>
<p>如果确定 API 很简单，不会有进一步扩展，可以考虑放在主域名下:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>//example<span class="meta">.org</span>/api/</div></pre></td></tr></table></figure></p>
<h3 id="版本"><a href="# 版本" class="headerlink" title="版本"></a>版本 </h3><p> 应该将 API 的版本号放入 URL。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span></div></pre></td></tr></table></figure></p>
<h3 id="路径"><a href="# 路径" class="headerlink" title="路径"></a>路径 </h3><p> 在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以 API 中的名词也应该使用复数。<br>举例来说，有一个 API 提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span>zoos</div><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span>animals</div><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span>employees</div></pre></td></tr></table></figure></p>
<h3 id="HTTP 动词"><a href="#HTTP 动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词 </h3><p> 对于资源的具体操作类型，由 HTTP 动词表示。<br>常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET（<span class="keyword">SELECT</span>）：从服务器取出资源（一项或多项）。</div><div class="line">POST（<span class="keyword">CREATE</span>）：在服务器新建一个资源。</div><div class="line">PUT（<span class="keyword">UPDATE</span>）：在服务器更新资源（客户端提供改变后的完整资源）。</div><div class="line"><span class="keyword">PATCH</span>（<span class="keyword">UPDATE</span>）：在服务器更新资源（客户端提供改变的属性）。</div><div class="line"><span class="keyword">DELETE</span>（<span class="keyword">DELETE</span>）：从服务器删除资源。</div></pre></td></tr></table></figure>
<p>一些例子：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /zoos：列出所有动物园</div><div class="line">POST /zoos：新建一个动物园</div><div class="line">GET <span class="meta-keyword">/zoos/</span>ID：获取某个指定动物园的信息</div><div class="line">PUT <span class="meta-keyword">/zoos/</span>ID：更新某个指定动物园的信息（提供该动物园的全部信息）</div><div class="line">PATCH <span class="meta-keyword">/zoos/</span>ID：更新某个指定动物园的信息（提供该动物园的部分信息）</div><div class="line">DELETE <span class="meta-keyword">/zoos/</span>ID：删除某个动物园</div><div class="line">GET <span class="meta-keyword">/zoos/</span>ID/animals：列出某个指定动物园的所有动物</div><div class="line">DELETE <span class="meta-keyword">/zoos/</span>ID<span class="meta-keyword">/animals/</span>ID：删除某个指定动物园的指定动物</div></pre></td></tr></table></figure>
<h3 id="过滤信息（Filtering）"><a href="# 过滤信息（Filtering）" class="headerlink" title="过滤信息（Filtering）"></a>过滤信息（Filtering）</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该提供参数，过滤返回结果。<br>下面是一些常见的参数:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">?limit=<span class="number">10</span>：指定返回记录的数量</div><div class="line">?offset=<span class="number">10</span>：指定返回记录的开始位置。</div><div class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>：指定第几页，以及每页的记录数。</div><div class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</div><div class="line">?animal_type_id=<span class="number">1</span>：指定筛选条件</div></pre></td></tr></table></figure>
<p>参数的设计允许存在冗余，即允许 API 路径和 URL 参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p>
<h3 id="状态码（Status-Codes）"><a href="# 状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的 HTTP 动词）:</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">200 </span>OK - [<span class="keyword">GET</span>]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</div><div class="line"><span class="symbol">201 </span>CREATED - [POST/<span class="keyword">PUT</span>/PATCH]：用户新建或修改数据成功。</div><div class="line"><span class="symbol">202 </span>Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</div><div class="line"><span class="symbol">204 </span>NO CONTENT - [<span class="keyword">DELETE</span>]：用户删除数据成功。</div><div class="line"><span class="symbol">400 </span>INVALID REQUEST - [POST/<span class="keyword">PUT</span>/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</div><div class="line"><span class="symbol">401 </span>Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</div><div class="line"><span class="symbol">403 </span>Forbidden - [*] 表示用户得到授权（与 <span class="number">401</span> 错误相对），但是访问是被禁止的。</div><div class="line"><span class="symbol">404 </span><span class="keyword">NOT</span> FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</div><div class="line"><span class="symbol">406 </span><span class="keyword">Not</span> Acceptable - [<span class="keyword">GET</span>]：用户请求的格式不可得（比如用户请求 JSON 格式，但是只有 XML 格式）。</div><div class="line"><span class="symbol">410 </span>Gone -[<span class="keyword">GET</span>]：用户请求的资源被永久删除，且不会再得到的。</div><div class="line"><span class="symbol">422 </span>Unprocesable entity - [POST/<span class="keyword">PUT</span>/PATCH] 当创建一个对象时，发生一个验证错误。</div><div class="line"><span class="symbol">500 </span>INTERNAL SERVER <span class="keyword">ERROR</span> - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</div></pre></td></tr></table></figure>
<h3 id="错误处理（Error-handling）"><a href="# 错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h3><p>如果状态码是 4xx，就应该向用户返回出错信息。一般来说，返回的信息中将 error 作为键名，出错信息作为键值即可。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">error</span>: <span class="string">"Invalid API key"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="返回结果"><a href="# 返回结果" class="headerlink" title="返回结果"></a>返回结果 </h3><p> 针对不同操作，服务器向用户返回的结果应该符合以下规范。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET /collection：返回资源对象的列表（数组）</div><div class="line">GET <span class="meta-keyword">/collection/</span>resource：返回单个资源对象</div><div class="line">POST /collection：返回新生成的资源对象</div><div class="line">PUT <span class="meta-keyword">/collection/</span>resource：返回完整的资源对象</div><div class="line">PATCH <span class="meta-keyword">/collection/</span>resource：返回完整的资源对象</div><div class="line">DELETE <span class="meta-keyword">/collection/</span>resource：返回一个空文档</div></pre></td></tr></table></figure></p>
<h3 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h3><p>RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向 api.example.com 的根目录发出请求，会得到这样一个文档。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"link"</span>: &#123;</div><div class="line">  <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</div><div class="line">  <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</div><div class="line">  <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，文档中有一个 link 属性，用户读取这个属性就知道下一步该调用什么 API 了。rel 表示这个 API 与当前网址的关系（collection 关系，并给出该 collection 的网址），href 表示 API 的路径，title 表示 API 的标题，type 表示返回类型。<br>Hypermedia API 的设计被称为 HATEOAS。Github 的 API 就是这种设计，访问 api.github.com 会得到一个所有可用 API 的网址列表。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</div><div class="line">  <span class="string">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面可以看到，如果想获取当前用户的信息，应该去访问 api.github.com/user，然后就得到了下面结果。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Requires authentication"</span>,</div><div class="line">  <span class="attr">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<h3 id="其他"><a href="# 其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>API 的身份认证应该使用 OAuth 2.0 框架。</li>
<li>服务器返回的数据格式，应该尽量使用 JSON，避免使用 XML。</li>
</ul>
<h1 id="案例修正"><a href="# 案例修正" class="headerlink" title="案例修正"></a>案例修正 </h1><p> 下面我们使用上面的准则进行 api 的整理修改，注意我们目前没有做到 Hypermedia</p>
<h2 id="用户 API-USERS"><a href="# 用户 API-USERS" class="headerlink" title="用户 API : USERS"></a>用户 API : USERS</h2><h3 id="修改前"><a href="# 修改前" class="headerlink" title="修改前"></a>修改前</h3><ul>
<li><code>/api/v1/user/:user_id</code> GET 获取用户信息</li>
<li><code>/api/v1/auth/register</code> POST 用户注册</li>
<li><code>/api/v1/auth/login</code> POST 用户登录</li>
<li><code>/api/v1/auth/confirmpw</code> POST 确认密码</li>
<li><code>/api/v1/auth/changepw</code> POST 修改密码</li>
</ul>
<h3 id="诊断"><a href="# 诊断" class="headerlink" title="诊断"></a>诊断</h3><ul>
<li>资源没有使用复数形式，如 user</li>
<li>:user_id 和 users 冗余，使用:id 即可</li>
<li>存在动词如 register,login 等</li>
<li>confirmpw 和 changepw 冗余, 应该在改变密码的时候对密码进行确认。</li>
</ul>
<h3 id="修改后"><a href="# 修改后" class="headerlink" title="修改后"></a>修改后 </h3><p> 由于本项目的用户数据从后台导入，因此删除 register 功能，另外因为此项目为隐私项目进行授权后所有的请求需要附带 token 这里省略 access_token 参数。这里省略 <code>/api/v1</code> 的前缀: </p>
<ul>
<li><code>/authentication</code> GET 验证用户名密码，并重新生成 token，返回基本的用户信息</li>
<li><code>/users/changePassword</code> POST 重置用户密码，重新生成盐值和 hash 存储到数据库中，返回修改后的用户基本信息(这个暂时不知道怎么改, 是使用 users UPDATE 方法，或者将改变密码变成一个名词的服务)</li>
<li><code>/users/details</code> GET 获取用户详细信息, 如最近的主题以及最近的回复</li>
</ul>
<h2 id="帖子 API-POSTS"><a href="# 帖子 API-POSTS" class="headerlink" title="帖子 API : POSTS"></a>帖子 API : POSTS</h2><ul>
<li><code>/api/v1/recent</code> GET 获取最近帖子</li>
<li><code>/api/v1/posts?limit=xx&amp;page=xx</code> GET 获取帖子列表</li>
<li><code>/api/v1/post/:post_id</code> GET 获取某个帖子内容</li>
<li><code>/api/v1/post</code> POST 新建一个帖子</li>
<li><code>/api/v1/post/:post_id/likes</code> POST 为某个帖子点赞</li>
<li><code>/api/v1/post/:id</code> PUT 更新某个帖子</li>
<li><code>/api/v1/post/:id</code> DELETE 删除某个帖子</li>
</ul>
<h3 id="诊断 -1"><a href="# 诊断 -1" class="headerlink" title="诊断"></a>诊断</h3><ul>
<li>资源没有使用复数形式</li>
<li>post_id 冗余</li>
<li>recent 的 api 和获取帖子列表冗余，设置 limit 为某值,page 为 1 即可获得最近的帖子</li>
<li>点赞功能并不在需求里，这里删除掉</li>
</ul>
<h3 id="修改后 -1"><a href="# 修改后 -1" class="headerlink" title="修改后"></a>修改后</h3><ul>
<li><code>/posts?limit=xx&amp;page=xx</code> GET 获取帖子列表</li>
<li><code>/posts/:id</code> GET 获取某个帖子的具体内容</li>
<li><code>/posts</code> POST 创建帖子，返回帖子基本内容。</li>
<li><code>/posts/:id</code> DELETE 删除帖子，返回空文档。</li>
</ul>
<h2 id="回复 API-：-REPLYS"><a href="# 回复 API-：-REPLYS" class="headerlink" title="回复 API ： REPLYS"></a>回复 API ： REPLYS</h2><ul>
<li><code>/api/v1/reply</code> POST 创建一个回复</li>
<li><code>/api/v1/reply/:reply_id</code> DELETE 删除某个回复</li>
</ul>
<h3 id="诊断 -2"><a href="# 诊断 -2" class="headerlink" title="诊断"></a>诊断</h3><ul>
<li>资源没有使用复数形式</li>
<li>reply_id 冗余</li>
</ul>
<h3 id="修改后 -2"><a href="# 修改后 -2" class="headerlink" title="修改后"></a>修改后</h3><ul>
<li><code>replys</code> POST 创建一个回复，返回该回复(这里应该增加帖子的回复数目)</li>
<li><code>replys/:id</code> DELETE 删除某个回复, 返回空文档(这里应该减少帖子的回复数目)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前写Restful的服务器端API，写的不好，痛定思痛，决心好好搞懂Restful。在这一篇中我们首先搞懂Rest的含义，然后以我编写的失败的api为例，讲解如何编写出符合Rest风格的API。注意本篇指导原则一节大部分来自阮一峰老师的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot;&gt;RESTful API 设计指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://nap-blog.artemisprojects.org/categories/web/"/>
    
    
      <category term="rest" scheme="http://nap-blog.artemisprojects.org/tags/rest/"/>
    
  </entry>
  
  <entry>
    <title>Restful API 浅析 之设计原则与案例修正</title>
    <link href="http://nap-blog.artemisprojects.org/2015-11-restful-note/"/>
    <id>http://nap-blog.artemisprojects.org/2015-11-restful-note/</id>
    <published>2015-11-03T16:00:00.000Z</published>
    <updated>2016-04-06T03:06:29.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前写 Restful 的服务器端 API，写的不好，痛定思痛，决心好好搞懂 Restful。<br>在这一篇中我们首先搞懂 Rest 的含义，然后以我编写的失败的 api 为例，讲解如何编写出符合 Rest 风格的 API。注意本篇指导原则一节大部分来自阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="Restful 浅析"><a href="#Restful 浅析" class="headerlink" title="Restful 浅析"></a>Restful 浅析</h2><p>REST 是”REpresentational State Transfer”，一种翻译是”表现层状态转移”, 首先看看 wiki 百科的介绍:</p>
<blockquote>
<p>REST - 表征状态转移是 Roy Fielding 博士在 2000 年他的博士论文中提出来的一种软件架构风格。 目前在三种主流的 Web 服务实现方案中，因为 REST 模式的 Web 服务与复杂的 SOAP 和 XML-RPC 对比来讲明显的更加简洁，越来越多的 web 服务开始采用 REST 风格设计和实现。例如，Amazon.com 提供接近 REST 风格的 Web 服务进行图书查找；雅虎提供的 Web 服务也是 REST 风格的。 – wiki</p>
</blockquote>
<p>从以上的介绍中我们知道 REST 是一种 web 软件架构风格，不过我还是不知道 REST 是个什么鬼，再查查看，有人这么解释 REST:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> REST 是一套用来创建 Web Service 的方法。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 的主旨是让事情尽量的简单化。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 使用 HTTP 里的方法：GET， POST， DELETE， PUT。你不需要使用 URL 或请求的内容来指定这个方法。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 使用 URL 来指明你将要操作什么对象。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 使用 HTTP 状态码作为返回值。</span></div><div class="line">-<span class="ruby"> REST 式的 Web Service 调用产生的 HTTP 请求内容只是用于服务数据——不是用来指明调用方法，目标对象或返回值的。</span></div></pre></td></tr></table></figure></p>
<p>简单来说，REST 是所有 web 应用都应该遵守的架构设计指导原则，每一个 URL 代表一种资源，客户端通过四个 HTTP 动词，对服务器端资源进行操作，实现”表现层状态转化”。查看以下几篇文章深入地了解 REST：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">理解 RESTful 架构</a> - 阮一峰老师 11 年的文章, 浅显易懂</li>
<li><a href="http://www.infoq.com/cn/articles/understanding-restful-style" target="_blank" rel="external">理解本真的 REST 架构风格</a> -infoq 上一篇翻译的文章，非常细致地解释了 REST</li>
<li><a href="http://martinfowler.com/articles/richardsonMaturityModel.html" target="_blank" rel="external">Richardson Maturity Model steps toward the glory of REST</a> - Martin fowler 解释 Richardson 的 REST3 层成熟度模型</li>
<li><a href="http://hippoom.github.io/blogs/value-of-hypermedia-from-client-perspective.html" target="_blank" rel="external">从消费者的角度评估 REST 的价值</a> - 以举例的方式解释 Richardson 成熟度模型的第三个级别：Hypermedia，很有意思的一篇文章。</li>
</ul>
<p>也许最快的学习方式是学习业界成熟的 REST api 设计, 可以看看 github 是如何设计 <a href="https://developer.github.com/v3/" target="_blank" rel="external">github API</a> 的, 另外也许你想看看提出 REST 的 <a href="http://www.ics.uci.edu/~fielding/pubs/webarch_icse2000.pdf" target="_blank" rel="external"> 那篇论文</a>，TL;DR</p>
<h2 id="设计原则"><a href="# 设计原则" class="headerlink" title="设计原则"></a>设计原则 </h2><p> 本来想写个 REST API 设计指南的，不过阮一峰老师在 14 年已经干了 <a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external"> 这事</a>，这里我们转载该文章的原则，然后重新修改我们的 api。另外一些好的指南:</p>
<ul>
<li><a href="https://bourgeois.me/rest/" target="_blank" rel="external">Some REST best practices</a></li>
<li><a href="http://codeplanet.io/principles-good-restful-api-design/" target="_blank" rel="external">Principles of good RESTful API Design</a></li>
</ul>
<h2 id="指导原则"><a href="# 指导原则" class="headerlink" title="指导原则"></a>指导原则 </h2><h3 id="域名"><a href="# 域名" class="headerlink" title="域名"></a> 域名 </h3><p> 应该尽量将 API 部署在专用域名之下, 如:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span><span class="comment">//api.example.com</span></div></pre></td></tr></table></figure></p>
<p>如果确定 API 很简单，不会有进一步扩展，可以考虑放在主域名下:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>//example<span class="meta">.org</span>/api/</div></pre></td></tr></table></figure></p>
<h3 id="版本"><a href="# 版本" class="headerlink" title="版本"></a>版本 </h3><p> 应该将 API 的版本号放入 URL。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span></div></pre></td></tr></table></figure></p>
<h3 id="路径"><a href="# 路径" class="headerlink" title="路径"></a>路径 </h3><p> 在 RESTful 架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以 API 中的名词也应该使用复数。<br>举例来说，有一个 API 提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span>zoos</div><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span>animals</div><div class="line">https:<span class="regexp">//</span>api.example.com<span class="regexp">/v1/</span>employees</div></pre></td></tr></table></figure></p>
<h3 id="HTTP 动词"><a href="#HTTP 动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词 </h3><p> 对于资源的具体操作类型，由 HTTP 动词表示。<br>常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET（<span class="keyword">SELECT</span>）   ：从服务器取出资源（一项或多项）。</div><div class="line">POST（<span class="keyword">CREATE</span>）  ：在服务器新建一个资源。</div><div class="line">PUT（<span class="keyword">UPDATE</span>）   ：在服务器更新资源（客户端提供改变后的完整资源）。</div><div class="line"><span class="keyword">PATCH</span>（<span class="keyword">UPDATE</span>） ：在服务器更新资源（客户端提供改变的属性）。</div><div class="line"><span class="keyword">DELETE</span>（<span class="keyword">DELETE</span>）：从服务器删除资源。</div></pre></td></tr></table></figure></p>
<p>一些例子：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET    /zoos   			：列出所有动物园</div><div class="line">POST   /zoos   			：新建一个动物园</div><div class="line">GET    <span class="meta-keyword">/zoos/</span>ID			：获取某个指定动物园的信息</div><div class="line">PUT    <span class="meta-keyword">/zoos/</span>ID			：更新某个指定动物园的信息（提供该动物园的全部信息）</div><div class="line">PATCH  <span class="meta-keyword">/zoos/</span>ID			：更新某个指定动物园的信息（提供该动物园的部分信息）</div><div class="line">DELETE <span class="meta-keyword">/zoos/</span>ID			：删除某个动物园</div><div class="line">GET    <span class="meta-keyword">/zoos/</span>ID/animals		：列出某个指定动物园的所有动物</div><div class="line">DELETE <span class="meta-keyword">/zoos/</span>ID<span class="meta-keyword">/animals/</span>ID	：删除某个指定动物园的指定动物</div></pre></td></tr></table></figure></p>
<h3 id="过滤信息（Filtering）"><a href="# 过滤信息（Filtering）" class="headerlink" title="过滤信息（Filtering）"></a>过滤信息（Filtering）</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该提供参数，过滤返回结果。<br>下面是一些常见的参数:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">?limit=<span class="number">10</span>		：指定返回记录的数量</div><div class="line">?offset=<span class="number">10</span>		：指定返回记录的开始位置。</div><div class="line">?page=<span class="number">2</span>&amp;per_page=<span class="number">100</span>	：指定第几页，以及每页的记录数。</div><div class="line">?sortby=name&amp;order=asc	：指定返回结果按照哪个属性排序，以及排序顺序。</div><div class="line">?animal_type_id=<span class="number">1</span>	：指定筛选条件</div></pre></td></tr></table></figure></p>
<p>参数的设计允许存在冗余，即允许 API 路径和 URL 参数偶尔有重复。比如，<code>GET /zoo/ID/animals</code> 与 <code>GET /animals?zoo_id=ID</code> 的含义是相同的。</p>
<h3 id="状态码（Status-Codes）"><a href="# 状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的 HTTP 动词）:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">200 </span>OK - [<span class="keyword">GET</span>]				：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</div><div class="line"><span class="symbol">201 </span>CREATED - [POST/<span class="keyword">PUT</span>/PATCH]		：用户新建或修改数据成功。</div><div class="line"><span class="symbol">202 </span>Accepted - [*]			：表示一个请求已经进入后台排队（异步任务）</div><div class="line"><span class="symbol">204 </span>NO CONTENT - [<span class="keyword">DELETE</span>]		：用户删除数据成功。</div><div class="line"><span class="symbol">400 </span>INVALID REQUEST - [POST/<span class="keyword">PUT</span>/PATCH]	：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</div><div class="line"><span class="symbol">401 </span>Unauthorized - [*]			：表示用户没有权限（令牌、用户名、密码错误）。</div><div class="line"><span class="symbol">403 </span>Forbidden - [*] 			：表示用户得到授权（与 <span class="number">401</span> 错误相对），但是访问是被禁止的。</div><div class="line"><span class="symbol">404 </span><span class="keyword">NOT</span> FOUND - [*]			：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</div><div class="line"><span class="symbol">406 </span><span class="keyword">Not</span> Acceptable - [<span class="keyword">GET</span>]		：用户请求的格式不可得（比如用户请求 JSON 格式，但是只有 XML 格式）。</div><div class="line"><span class="symbol">410 </span>Gone -[<span class="keyword">GET</span>]				：用户请求的资源被永久删除，且不会再得到的。</div><div class="line"><span class="symbol">422 </span>Unprocesable entity - [POST/<span class="keyword">PUT</span>/PATCH] ：当创建一个对象时，发生一个验证错误。</div><div class="line"><span class="symbol">500 </span>INTERNAL SERVER <span class="keyword">ERROR</span> - [*]		：服务器发生错误，用户将无法判断发出的请求是否成功。</div></pre></td></tr></table></figure></p>
<h3 id="错误处理（Error-handling）"><a href="# 错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h3><p>如果状态码是<code>4xx</code>，就应该向用户返回出错信息。一般来说，返回的信息中将 error 作为键名，出错信息作为键值即可。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">error</span>: <span class="string">"Invalid API key"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="返回结果"><a href="# 返回结果" class="headerlink" title="返回结果"></a>返回结果 </h3><p> 针对不同操作，服务器向用户返回的结果应该符合以下规范。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET    /collection 		：返回资源对象的列表（数组）</div><div class="line">GET    <span class="meta-keyword">/collection/</span>resource 	：返回单个资源对象</div><div class="line">POST   /collection 		：返回新生成的资源对象</div><div class="line">PUT    <span class="meta-keyword">/collection/</span>resource 	：返回完整的资源对象</div><div class="line">PATCH  <span class="meta-keyword">/collection/</span>resource 	：返回完整的资源对象</div><div class="line">DELETE <span class="meta-keyword">/collection/</span>resource 	：返回一个空文档</div></pre></td></tr></table></figure></p>
<h3 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h3><p>RESTful API 最好做到 Hypermedia，即返回结果中提供链接，连向其他 API 方法，使得用户不查文档，也知道下一步应该做什么。<br>比如，当用户向 api.example.com 的根目录发出请求，会得到这样一个文档。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"link"</span>: &#123;</div><div class="line">  <span class="attr">"rel"</span>:   <span class="string">"collection https://www.example.com/zoos"</span>,</div><div class="line">  <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</div><div class="line">  <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码表示，文档中有一个 link 属性，用户读取这个属性就知道下一步该调用什么 API 了。rel 表示这个 API 与当前网址的关系（collection 关系，并给出该 collection 的网址），href 表示 API 的路径，title 表示 API 的标题，type 表示返回类型。<br>Hypermedia API 的设计被称为 HATEOAS。Github 的 API 就是这种设计，访问 api.github.com 会得到一个所有可用 API 的网址列表。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</div><div class="line">  <span class="string">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面可以看到，如果想获取当前用户的信息，应该去访问 api.github.com/user，然后就得到了下面结果。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Requires authentication"</span>,</div><div class="line">  <span class="attr">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>
<h3 id="其他"><a href="# 其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>API 的身份认证应该使用 OAuth 2.0 框架。</li>
<li>服务器返回的数据格式，应该尽量使用 JSON，避免使用 XML。</li>
</ul>
<h2 id="案例修正"><a href="# 案例修正" class="headerlink" title="案例修正"></a>案例修正 </h2><p> 下面我们使用上面的准则进行 api 的整理修改，注意我们目前没有做到 Hypermedia</p>
<h3 id="用户 API-USERS"><a href="# 用户 API-USERS" class="headerlink" title="用户 API : USERS"></a>用户 API : USERS</h3><h4 id="修改前"><a href="# 修改前" class="headerlink" title="修改前"></a>修改前</h4><ul>
<li><code>/api/v1/user/:user_id</code>     GET  获取用户信息</li>
<li><code>/api/v1/auth/register</code>     POST 用户注册</li>
<li><code>/api/v1/auth/login</code>         POST 用户登录</li>
<li><code>/api/v1/auth/confirmpw</code>     POST 确认密码</li>
<li><code>/api/v1/auth/changepw</code>     POST 修改密码</li>
</ul>
<h4 id="诊断"><a href="# 诊断" class="headerlink" title="诊断"></a>诊断</h4><ul>
<li>资源没有使用复数形式，如<code>user</code></li>
<li><code>:user_id</code>和 <code>users</code> 冗余，使用 <code>:id</code> 即可</li>
<li>存在动词如 <code>register</code>,<code>login</code> 等</li>
<li><code>confirmpw</code>和 <code>changepw</code> 冗余, 应该在改变密码的时候对密码进行确认。</li>
</ul>
<h4 id="修改后"><a href="# 修改后" class="headerlink" title="修改后"></a>修改后 </h4><p> 由于本项目的用户数据从后台导入，因此删除 register 功能，另外因为此项目为隐私项目进行授权后所有的请求需要附带 token，这里省略 access_token 参数。<br>这里省略 <code>/api/v1</code> 的前缀:</p>
<ul>
<li><code>/authentication</code> GET 验证用户名密码，并重新生成 token，返回基本的用户信息</li>
<li><code>/users/changePassword</code> POST 重置用户密码，重新生成盐值和 hash 存储到数据库中，返回修改后的用户基本信息(这个暂时不知道怎么改, 是使用 users UPDATE 方法，或者将改变密码变成一个名词的服务)</li>
<li><code>/users/details</code> GET 获取用户详细信息，如最近的主题以及最近的回复</li>
</ul>
<h3 id="帖子 API-POSTS"><a href="# 帖子 API-POSTS" class="headerlink" title="帖子 API : POSTS"></a>帖子 API : POSTS</h3><ul>
<li><code>/api/v1/recent</code>                     GET    获取最近帖子</li>
<li><code>/api/v1/posts?limit=xx&amp;page=xx</code>     GET    获取帖子列表</li>
<li><code>/api/v1/post/:post_id</code>             GET    获取某个帖子内容</li>
<li><code>/api/v1/post</code>                     POST   新建一个帖子</li>
<li><code>/api/v1/post/:post_id/likes</code>     POST   为某个帖子点赞</li>
<li><code>/api/v1/post/:id</code>                 PUT    更新某个帖子</li>
<li><code>/api/v1/post/:id</code>                 DELETE 删除某个帖子</li>
</ul>
<h4 id="诊断 -1"><a href="# 诊断 -1" class="headerlink" title="诊断"></a>诊断</h4><ul>
<li>资源没有使用复数形式</li>
<li>post_id 冗余</li>
<li>recent 的 api 和获取帖子列表冗余，设置 limit 为某值,page 为 1 即可获得最近的帖子</li>
<li>点赞功能并不在需求里，这里删除掉</li>
</ul>
<h4 id="修改后 -1"><a href="# 修改后 -1" class="headerlink" title="修改后"></a>修改后</h4><ul>
<li><code>/posts?limit=xx&amp;page=xx</code> GET    获取帖子列表</li>
<li><code>/posts/:id</code>                 GET    获取某个帖子的具体内容</li>
<li><code>/posts</code>                    POST   创建帖子，返回帖子基本内容。</li>
<li><code>/posts/:id</code>                 DELETE 删除帖子，返回空文档。</li>
</ul>
<h3 id="回复 API-：-REPLYS"><a href="# 回复 API-：-REPLYS" class="headerlink" title="回复 API ： REPLYS"></a>回复 API ： REPLYS</h3><ul>
<li><code>/api/v1/reply</code>             POST   创建一个回复</li>
<li><code>/api/v1/reply/:reply_id</code> DELETE 删除某个回复</li>
</ul>
<h4 id="诊断 -2"><a href="# 诊断 -2" class="headerlink" title="诊断"></a>诊断</h4><ul>
<li>资源没有使用复数形式</li>
<li><code>reply_id</code>冗余</li>
</ul>
<h4 id="修改后 -2"><a href="# 修改后 -2" class="headerlink" title="修改后"></a>修改后</h4><ul>
<li><code>replys</code>         POST   创建一个回复，返回该回复(这里应该增加帖子的回复数目)</li>
<li><code>replys/:id</code>     DELETE 删除某个回复, 返回空文档(这里应该减少帖子的回复数目)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前写Restful的服务器端API，写的不好，痛定思痛，决心好好搞懂Restful。&lt;br&gt;在这一篇中我们首先搞懂Rest的含义，然后以我编写的失败的api为例，讲解如何编写出符合Rest风格的API。注意本篇指导原则一节大部分来自阮一峰老师的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot;&gt;RESTful API 设计指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://nap-blog.artemisprojects.org/categories/web/"/>
    
    
      <category term="restful" scheme="http://nap-blog.artemisprojects.org/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>east 数据质量合规分析（一）</title>
    <link href="http://nap-blog.artemisprojects.org/2015-10-east-1/"/>
    <id>http://nap-blog.artemisprojects.org/2015-10-east-1/</id>
    <published>2015-10-23T11:04:22.000Z</published>
    <updated>2016-04-06T03:06:29.906Z</updated>
    
    <content type="html"><![CDATA[<p>关于第一次讨论 east 数据质量合规分析的记录</p>
<a id="more"></a>
<hr>
<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a>背景 </h2><p> 中国银监会会检查各银行的存、贷款数据是否合规，于是银行自己要先检查一遍。银行外包给某 K 公司，某 K 公司根据中国银监会监管数据标准化数据结构建立了一个数据库，称为 MODEL 库，共 79 张表。某 K 定时从银行的数据库（称为 ODS）抽取、合并、筛选得到 MODEL 库，在 MODEL 库的基础上做数据质量合规分析。</p>
<h2 id="合规校验模型例举"><a href="# 合规校验模型例举" class="headerlink" title="合规校验模型例举"></a>合规校验模型例举 </h2><p> 总共有 30 多个模型，每个模型是对一类情况的分析，目前就是一条 select 语句，这里例举四个：</p>
<h3 id="模型 1（简单的）"><a href="# 模型 1（简单的）" class="headerlink" title="模型 1（简单的）"></a>模型 1（简单的）</h3><p>模型名称：发生欠息五级分类仍为正常 <br> 模型简介：对检查期内银行所发放贷款进行筛选，发生欠息的是否采取了相应地五级分类调整。比如检查 20120101-20121231 时间段内的基本步骤如下：<br>（1）选取对公（或个人）信贷业务借据表，设置过滤条件：表内欠息余额大于 0，或表外欠息余额大于 0，生成结果集 1；<br>（2）对结果集 1 设置过滤条件：贷款五级分类 = 正常，生成结果集 2；<br>（3）对结果集 2 设置过滤条件：借款余额大于 0 或贷款实际发放日期大于等于 20120101，且贷款原始到期日期小于等于 20121231，生成结果集 3。<br>sql 语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line">  <span class="keyword">FROM</span> ANALYSIS_00410 DGXDYWJJ</div><div class="line"> <span class="keyword">WHERE</span> (DGXDYWJJ.BNQXYE &gt; <span class="string">'0'</span> <span class="keyword">OR</span> DGXDYWJJ.BWQXYE &gt; <span class="string">'0'</span>)</div><div class="line">   <span class="keyword">AND</span> DGXDYWJJ.DKWJFL = <span class="string">'正常'</span></div><div class="line">   <span class="keyword">AND</span> (DGXDYWJJ.JKYE &gt; <span class="string">'0'</span> <span class="keyword">OR</span></div><div class="line">       DGXDYWJJ.DKSJFFRQ &gt;= <span class="string">'20120101'</span> <span class="keyword">AND</span> DGXDYWJJ.DKYSDQRQ &lt;= <span class="string">'20121231'</span>);</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> *</div><div class="line">  <span class="keyword">FROM</span> ANALYSIS_00409 GRXDYWJJ</div><div class="line"> <span class="keyword">WHERE</span> (GRXDYWJJ.BNQXYE &gt; <span class="string">'0'</span> <span class="keyword">OR</span> GRXDYWJJ.BWQXYE &gt; <span class="string">'0'</span>)</div><div class="line">   <span class="keyword">AND</span> GRXDYWJJ.DKWJFL = <span class="string">'正常'</span></div><div class="line">   <span class="keyword">AND</span> (GRXDYWJJ.JKYE &gt; <span class="string">'0'</span> <span class="keyword">OR</span></div><div class="line">       GRXDYWJJ.DKSJFFRQ &gt;= <span class="string">'20120101'</span> <span class="keyword">AND</span> GRXDYWJJ.DKYSDQRQ &lt;= <span class="string">'20121231'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="模型 2"><a href="# 模型 2" class="headerlink" title="模型 2"></a>模型 2</h3><p>模型名称：贷款资金回流至担保人 <br> 模型简介：在房地产行业持续调控的背景下，不少房地产企业资金紧张无法获得银行信贷资金，转而为借款人（实践中往往是有关联关系的企业）提供担保，待借款人获得信贷资金后再回流至担保人 <br> 银监会给出的基本步骤：<br>（1）选取客户基本信息表，设置筛选条件：客户名称包含“房地产”“土地”“置业”，仅选择客户代码和客户名称字段，生成结果集 1；<br>（2）将结果集 1 与担保关系表进行关联，关联条件为：客户代码 = 保证人客户统一编号，设置过滤条件：担保到期日期大于等于 20120101，生成结果集 2；<br>（3）将结果集 2 与对公信贷业务借据表进行关联，关联条件为：被担保合同号 = 信贷合同号，设置过滤条件：借款余额大于 0，保证人客户统一编号不等于客户统一编号，生成结果集 3；<br>（4）将结果集 3 与对公客户表进行关联，关联条件为：客户统一编号（借款人）= 客户统一编号，生成结果集 4；<br>（5）将结果集 4 与对公信贷分户账进行关联，关联条件为：信贷借据号相等，找到贷款入账账号，生成结果集 5；<br>（6）将结果集 5 与对公活期存款分户账明细记录进行关联，关联条件：贷款入账账号 = 活期存款账号，设置过滤条件：贷款发放后三日内流水记录，按照“保证人客户统一编号、核心交易日期、笔次序号”进行升序排序，生成结果集 6；<br>（7）对结果集 6 设置过滤条件：交易金额 / 贷款金额介于 0.2-1.25 之间，借贷标志为“借”，生成结果集 7；<br>（8）对结果集 7 设置过滤条件：对方户名 = 客户名称（保证人），生成结果集 8。<br>sql：(设置参数，指定日期)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> DGHQCKFHZMXJL.*</div><div class="line">  <span class="keyword">FROM</span> ANALYSIS_00410 DGXDYWJJ, ANALYSIS_00209 DGHQCKFHZMXJL</div><div class="line"> <span class="keyword">WHERE</span> DGXDYWJJ.JKYE &gt; <span class="number">0</span></div><div class="line">   <span class="keyword">AND</span> DGXDYWJJ.KHTYBH <span class="keyword">NOT</span> <span class="keyword">IN</span></div><div class="line">       (<span class="keyword">SELECT</span> DBGX.BZRKHTYBH</div><div class="line">          <span class="keyword">FROM</span> ANALYSIS_00303 DGKH, ANALYSIS_00412 DBGX</div><div class="line">         <span class="keyword">WHERE</span> DGKH.KHTYBH = DBGX.BZRKHTYBH</div><div class="line">           <span class="keyword">AND</span> DBGX.DBDQRQ &gt;= ‘指定日期’</div><div class="line">           <span class="keyword">AND</span> DGKH.KHMC <span class="keyword">LIKE</span> <span class="string">'% 房地产 %'</span></div><div class="line">            <span class="keyword">or</span> DGKH.KHMC <span class="keyword">LIKE</span> <span class="string">'% 土地 %'</span></div><div class="line">            <span class="keyword">or</span> DGKH.KHMC <span class="keyword">LIKE</span> <span class="string">'% 置业 %'</span>)</div><div class="line">   <span class="keyword">AND</span> DGXDYWJJ.DKRZZH = DGHQCKFHZMXJL.HQCKZH</div><div class="line">   <span class="keyword">AND</span> (<span class="keyword">TO_DATE</span>(DGHQCKFHZMXJL.HXJYRQ, <span class="string">'yyyymmdd'</span>) -</div><div class="line">       <span class="keyword">TO_DATE</span>(DGXDYWJJ.DKSJFFRQ, <span class="string">'yyyymmdd'</span>) &lt;= <span class="number">3</span>)</div><div class="line">   <span class="keyword">AND</span> DGHQCKFHZMXJL.JDBZ = <span class="string">'借'</span></div><div class="line">   <span class="keyword">AND</span> DGHQCKFHZMXJL.JYJE / DGXDYWJJ.JKJE &gt; <span class="number">0.2</span></div><div class="line">   <span class="keyword">AND</span> DGHQCKFHZMXJL.JYJE / DGXDYWJJ.JKJE &lt; <span class="number">1.25</span></div><div class="line">   <span class="keyword">AND</span> DGHQCKFHZMXJL.DFHM =</div><div class="line">       (<span class="keyword">SELECT</span> DGKH.KHMC</div><div class="line">          <span class="keyword">FROM</span> ANALYSIS_00303 DGKH, ANALYSIS_00412 DBGX</div><div class="line">         <span class="keyword">WHERE</span> DGKH.KHTYBH = DBGX.BZRKHTYBH</div><div class="line">           <span class="keyword">AND</span> DBGX.DBDQRQ &gt;= ‘指定日期’</div><div class="line">           <span class="keyword">AND</span> DGKH.KHMC <span class="keyword">LIKE</span> <span class="string">'% 房地产 %'</span></div><div class="line">            <span class="keyword">or</span> DGKH.KHMC <span class="keyword">LIKE</span> <span class="string">'% 土地 %'</span></div><div class="line">            <span class="keyword">or</span> DGKH.KHMC <span class="keyword">LIKE</span> <span class="string">'% 置业 %'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="模型 3"><a href="# 模型 3" class="headerlink" title="模型 3"></a>模型 3</h3><p>模型名称：突击放贷”冲时点”<br>模型简介：检查银行是否为完成考核任务，在月（季）末突击放贷做大规模 <br> 算法：<br>1. 从对公活期存款分户账明细记录中找出在指定日期内的活期存款账号，形成结果集 1<br>2. 从对公贷款分户账中过滤出在结果集 1 中的贷款入账账号，形成结果集 2<br>3. 将结果集 2 中的贷款入账账号在对公信贷账和对公活期存款明细记录中查询，选出 <br> 对公活期存款明细记录. 对方账号 = 对公信贷分户账. 还款账号的贷款入账账号<br>4. 输入上述账号的对公信贷分户账明细记录，人工判断<br>sql 语句：（设置参数：指定日期）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line">  <span class="keyword">FROM</span> T_KJ_DGXFZMX DGXDFHZMX</div><div class="line"> <span class="keyword">WHERE</span> DGXDFHZMX.DKZH <span class="keyword">IN</span></div><div class="line">       (<span class="keyword">SELECT</span> DGXDFHZ.DKRZZH</div><div class="line">          <span class="keyword">FROM</span> T_KJ_DGXFZ DGXDFHZ,</div><div class="line">               T_KJ_DGHCFZMX DGHQCKFHZMXJL,</div><div class="line">               (<span class="keyword">SELECT</span> DGXDFHZ.DKRZZH</div><div class="line">                  <span class="keyword">FROM</span> T_KJ_DGXFZ DGXDFHZ</div><div class="line">                 <span class="keyword">WHERE</span> DGXDFHZ.KHRQ <span class="keyword">between</span> <span class="string">'&#123;0&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;1&#125;'</span></div><div class="line">                   <span class="keyword">and</span> DGXDFHZ.DKRZZH <span class="keyword">IN</span></div><div class="line">                       (<span class="keyword">SELECT</span> DGHQCKFHZMXJL.HQCKZH</div><div class="line">                          <span class="keyword">FROM</span> T_KJ_DGHCFZMX DGHQCKFHZMXJL</div><div class="line">                         <span class="keyword">WHERE</span> DGHQCKFHZMXJL.HXJYRQ <span class="keyword">BETWEEN</span> <span class="string">'&#123;0&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;1&#125;'</span></div><div class="line">                         <span class="keyword">group</span> <span class="keyword">by</span> DGHQCKFHZMXJL.HQCKZH)) T1</div><div class="line">         <span class="keyword">WHERE</span> DGXDFHZ.DKRZZH = T1.DKRZZH</div><div class="line">           <span class="keyword">AND</span> DGHQCKFHZMXJL.HQCKZH = T1.DKRZZH</div><div class="line">           <span class="keyword">AND</span> DGHQCKFHZMXJL.DFZH = DGXDFHZ.HKZH)</div></pre></td></tr></table></figure>
<h3 id="模型 4"><a href="# 模型 4" class="headerlink" title="模型 4"></a>模型 4</h3><p>模型名称：内部员工用本人身份证号开立账户 <br> 算法：1. 通过工号，身份证号，客户统一编号关联员工表，柜员表，个人基础信息表，个人活期存款分户账明细记录，个人定期存款分户账明细记录。<br>      2. 筛选条件工号等于柜员号 <br> 输出字段：客户统一编号，证件号码，工号，姓名，身份证号，员工状态，柜员号，活期存款账号，交易类型，交易柜员号，定期存款账号</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SELECT GRJCXX<span class="selector-class">.KHTYBH</span>, GRJCXX<span class="selector-class">.ZJHM</span>, YGB<span class="selector-class">.GH</span>, YGB<span class="selector-class">.XM</span>, YGB<span class="selector-class">.SFZH</span>, YGB<span class="selector-class">.YGZT</span>, GYB<span class="selector-class">.GYH</span>, GRHQCKFHZMXJL<span class="selector-class">.HQCKZH</span>, GRHQCKFHZMXJL<span class="selector-class">.JYLX</span>, GRHQCKFHZMXJL<span class="selector-class">.JYGYH</span>, GRDQCKFHZMXJL<span class="selector-class">.DQCKZH</span></div><div class="line">FROM ANALYSIS_00102 YGB, ANALYSIS_00103 GYB, ANALYSIS_00301 GRJCXX, ANALYSIS_00205 GRHQCKFHZMXJL, ANALYSIS_00207 GRDQCKFHZMXJL</div><div class="line">WHERE YGB.GH= GYB<span class="selector-class">.GH</span></div><div class="line">AND YGB.SFZH=GRJCXX<span class="selector-class">.ZJHM</span></div><div class="line">AND GRJCXX.KHTYBH=GRHQCKFHZMXJL<span class="selector-class">.KHTYBH</span></div><div class="line">AND GRHQCKFHZMXJL.KHTYBH=GRDQCKFHZMXJL<span class="selector-class">.KHTYBH</span></div><div class="line">AND YGB.GH= GYB.GYH</div></pre></td></tr></table></figure>
<p>模型说明：这里只是筛选出数据，这个模型本身并不违法，但是可以进一步挖掘，看有没有做洗钱等非法的事情。</p>
<h2 id="总结"><a href="# 总结" class="headerlink" title="总结"></a>总结 </h2><p> 模型理解起来应该不难，基本都是一条 select 语句，关键是理解业务逻辑和有关银行知识，比如很多都是对资金流向的检查，这就要对相关知识比较熟悉。技术方面，sql 可以优化，有的结果集可以用 R 做进一步的数据挖掘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于第一次讨论east数据质量合规分析的记录&lt;/p&gt;
    
    </summary>
    
      <category term="east" scheme="http://nap-blog.artemisprojects.org/categories/east/"/>
    
    
      <category term="east" scheme="http://nap-blog.artemisprojects.org/tags/east/"/>
    
  </entry>
  
  <entry>
    <title>我们的书架</title>
    <link href="http://nap-blog.artemisprojects.org/2015-10-books/"/>
    <id>http://nap-blog.artemisprojects.org/2015-10-books/</id>
    <published>2015-10-20T16:00:00.000Z</published>
    <updated>2016-09-13T03:25:51.795Z</updated>
    
    <content type="html"><![CDATA[<p> 汇总大家共享的书籍，欢迎组员之间互相借阅。<br>2016-9-15 更新。</p>
<a id="more"></a>
<hr>
<ul>
<li><a href="http://www.jd.com/" target="_blank" rel="external"> 京东 </a></li>
<li><a href="http://www.amazon.cn/" target="_blank" rel="external"> 亚马逊 </a></li>
<li><a href="http://www.china-pub.com/" target="_blank" rel="external"> 互动出版 </a></li>
<li><a href="http://www.taobao.com/" target="_blank" rel="external"> 淘宝 </a></li>
<li><a href="http://www.salttiger.com/" target="_blank" rel="external"> 电子书 </a></li>
</ul>
<table>
<thead>
<tr>
<th> 序号 </th>
<th> 书名 </th>
<th> 保管者 </th>
</tr>
</thead>
<tbody>
<tr>
<td>97</td>
<td> 计算机体系结构: 量化研究方法: 第 5 版 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>96</td>
<td> 程序员面试宝典 </td>
<td>Ziling LU</td>
</tr>
<tr>
<td>95</td>
<td> 剑指 offer</td>
<td>Ziling LU</td>
</tr>
<tr>
<td>94</td>
<td> 逻辑学导论 </td>
<td>Yiqun WANG</td>
</tr>
<tr>
<td>93</td>
<td>Java 并发编程实战 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>92</td>
<td>Spark 技术内幕 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>91</td>
<td>Spark 核心技术 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>90</td>
<td>Android 系统源码情景分析（修订版）</td>
<td>Tianchi LIU</td>
</tr>
<tr>
<td>89</td>
<td> 人月神话 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>88</td>
<td>HTTP 权威指南 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>87</td>
<td> 现代体系结构上的 UNIX 系统：内核程序员的 SMP 和缓存技术 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>86</td>
<td> 哥德尔、埃舍尔、巴赫：集异壁之大成 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>85</td>
<td> 程序员健康指南 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>84</td>
<td>UNIX 环境高级编程 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>83</td>
<td> 计算机程序的构造和解释 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>82</td>
<td>Kubernetes 实战 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>81</td>
<td>Zookeeper 分布式过程协同技术详解 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>80</td>
<td> 持续集成实践 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>79</td>
<td>Vim 实用技巧 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>78</td>
<td>ggplot2：数据分析与图形艺术 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>77</td>
<td>Flask Web 开发：基于 Python 的 Web 应用开发实战 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>76</td>
<td> 深入理解 Nginx：模块开发与架构解析 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>75</td>
<td> 毕业 5 年决定你的一生 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>74</td>
<td>Redis 设计与实现 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>73</td>
<td>Redis 实战 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>72</td>
<td>MySQL 管理之道：性能调优，高可用与监控 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>71</td>
<td> 高可用 MySQL</td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>70</td>
<td>Javascript 权威指南 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>69</td>
<td> 代码整洁之道 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>68</td>
<td>Nginx 高性能 web 服务器详解 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>67</td>
<td> 机器学习 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>66</td>
<td>Spark MLlib 机器学习 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>65</td>
<td> 深入理解 hadoop 第二版 </td>
<td>Tianchi LIU</td>
</tr>
<tr>
<td>64</td>
<td>Eclipse RCP 深入浅出 (?)</td>
<td>Yiqun WANG</td>
</tr>
<tr>
<td>63</td>
<td>AngularJS 权威指南 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>62</td>
<td>Spark 快速大数据分析 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>61</td>
<td> 深入理解 JVM 第二版 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>60</td>
<td>Go Web 编程 </td>
<td>Tianchi LIU</td>
</tr>
<tr>
<td>59</td>
<td>Spring batch 批处理框架 </td>
<td>Weiyi WANG</td>
</tr>
<tr>
<td>58</td>
<td>Python 绝技 </td>
<td>Weiyi WANG</td>
</tr>
<tr>
<td>57</td>
<td>C# WinForm 实践开发教程 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>56</td>
<td>Java 编程思想 第 4 版 </td>
<td>Weiyi WANG</td>
</tr>
<tr>
<td>55</td>
<td> 算法 第 4 版 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>54</td>
<td> 程序员修炼之道：从小工到专家 </td>
<td>Yiqun WANG</td>
</tr>
<tr>
<td>53</td>
<td>Docker 进阶与实战 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>52</td>
<td>Java 核心技术 第 1 卷 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>51</td>
<td> 深入理解 jvm 虚拟机 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>50</td>
<td> 构建高可用 Linux 服务器 </td>
<td>Zhongliang YUAN</td>
</tr>
<tr>
<td>49</td>
<td>R 语言与数据挖掘最佳实践和经典案例 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>48</td>
<td>Kubernetes 权威指南 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>47</td>
<td>24 小时 365 天不间断服务: 服务器 / 基础设施核心技术 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>46</td>
<td> 日志管理与分析权威指南 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>45</td>
<td> 实战 Elasticsearch、Logstash、Kibana</td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>44</td>
<td> 微服务架构与实践 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>43</td>
<td> 高效团队开发: 工具与方法 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>42</td>
<td> 网站运维技术与实践 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>41</td>
<td>Flume 日志收集与 MapReduce 模式 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>40</td>
<td>R 与 Hadoop 大数据分析实战 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>39</td>
<td>CoreOS 实践之路 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>38</td>
<td> 改善 Python 程序的 91 个建议 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>37</td>
<td> 云计算网络珠玑 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>36</td>
<td> 云数据中心网络技术 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>35</td>
<td> 深入浅出 Neutron</td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>34</td>
<td>OpenStack 云计算实战手册 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>33</td>
<td>OpenStack 实战指南 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>32</td>
<td>Hadoop 实战 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>31</td>
<td>HBase 权威指南 </td>
<td>Wiyi WANG</td>
</tr>
<tr>
<td>30</td>
<td> 从 Paxos 到 Zookeeper 分布式一致性原理 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>29</td>
<td> 软件定义数据中心 - 技术与实践 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>28</td>
<td>R 语言实践 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>27</td>
<td> 重构：改善既有代码的设计 </td>
<td>Yiqun WANG</td>
</tr>
<tr>
<td>26</td>
<td> 代码大全 </td>
<td>Yiqun WANG</td>
</tr>
<tr>
<td>25</td>
<td>MEAN Web 开发 </td>
<td>Ziling LU</td>
</tr>
<tr>
<td>24</td>
<td>Node.js+MongoDB+AngularJS Web 开发 </td>
<td>Ziling LU</td>
</tr>
<tr>
<td>23</td>
<td> 深入浅出 Node.js</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>22</td>
<td> 简约至上: 交互式设计四策略 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>21</td>
<td> 点石成金: 访客至上的 Web 和移动可用性设计秘笈 (第 3 版)</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>20</td>
<td>JavaScript 语言精粹 (修订版)</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>19</td>
<td>JavaScript DOM 编程艺术 (第 2 版)</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>18</td>
<td> 用 AngularJS 开发下一代 Web 应用 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>17</td>
<td>Head First HTML 与 CSS（第二版）</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>16</td>
<td> 编程珠玑 (第 2 版·修订版)</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>15</td>
<td>C 语言接口与实现 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>14</td>
<td>Hadoop 2.0-YARN 核心技术实践 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>13</td>
<td> 深入解析 YARN 架构设计与实现原理 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>12</td>
<td>Open Stack 设计与实现×2</td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>11</td>
<td> 学术研究：你的成功之道 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>10</td>
<td>Python 自动化运维：技术与最佳实践 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>9</td>
<td>Docker 源码分析 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>8</td>
<td> 从 0 到 1：开启商业与未来的秘密 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>7</td>
<td> 重来 (更为简单有效的商业思维)</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>6</td>
<td> 算法 (第 4 版)</td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>5</td>
<td>JavaScript 高级程序设计 </td>
<td>Chenglin MENG</td>
</tr>
<tr>
<td>4</td>
<td>Python Cookbook 中文 第 3 版 </td>
<td>Shuo CHENG</td>
</tr>
<tr>
<td>3</td>
<td>Mesos：大数据资源调度与大规模容器运行最佳实践 </td>
<td>Xiang XU</td>
</tr>
<tr>
<td>2</td>
<td>Docker 开发实践 </td>
<td>Ying ZHANG</td>
</tr>
<tr>
<td>1</td>
<td>Docker — 容器与容器云 </td>
<td>Ying ZHANG</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汇总大家共享的书籍，欢迎组员之间互相借阅。&lt;br&gt;2016-9-15更新。&lt;/p&gt;
    
    </summary>
    
      <category term="书架" scheme="http://nap-blog.artemisprojects.org/categories/%E4%B9%A6%E6%9E%B6/"/>
    
    
  </entry>
  
</feed>
